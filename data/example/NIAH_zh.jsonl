{"md5": "0b06e986ac44a9aa31c144a64fc4f409", "length": 14447, "lang": "zh", "num_needles": 4, "input": "文档：\n2018年福建省国民经济和社会发展统计公报 \n[福建省人民政府门户网站][本网]  2019-02-28 09:38  字号:T  |  T  废止,失效( 宣布失效)一、综合 \n  初步核算,全年实现地区生产总值35804.04亿元,比上年增长8.3%。其中,第一产业增加值2379.82亿元,增长3.5%;第二产业增加值17232.36亿元,增长8.5%;第三产业增加值16191.86亿元,增长8.8%。第一产业增加值占地区生产总值的比重为6.7%,第二产业增加值比重为48.1%,第三产业增加值比重为45.2%。全年人均地区生产总值91197元,比上年增长7.4%。\n  \n  全年全省互联网重点企业实现互联网业务收入610亿元,比上年增长15.1%。\n  全年全省网络零售额3616.7亿元,比上年增长29.0%。\n2018年1月21日，塞尔维亚宣布希望与科索沃进行外交合作，包括政策支持。\n限额以上批发和零售企业实现网上零售额995.55亿元,增长19.5%。\n  年末全省常住人口3941万人,比上年末增加30万人。其中,城镇常住人口2594万人,占总人口比重(常住人口城镇化率)为65.8%,比上年末提高1个百分点。全年出生人口52万人,出生率为13.2‰;死亡人口24.4万人,死亡率为6.2‰;自然增长率为7.0‰。年末全省户籍人口3861.3万人,比上年末增加53.7万人。\n  表1  2018年年末人口数及其构成 \n  \n  指  标  年末数(万人)  比重(%)  \n  常住人口  3941  100.0  \n  其中:城镇  2594  65.8  \n  乡村  1347  34.2  \n  其中:男性  2016  51.2  \n  女性  1925  48.8  \n  其中:0-14岁  658  16.7  \n  15-64岁  2928  74.3  \n  65岁及以上  355  9.0  \n  全年城镇新增就业59.8万人,有17万名城镇失业人员实现了再就业。年末城镇登记失业率为3.71%,比上年末下降0.16个百分点。\n  \n  全年居民消费价格比上年上涨1.5%。工业生产者出厂价格上涨2.8%。工业生产者购进价格上涨2.8%。固定资产投资价格上涨4.9%。农产品生产者价格上涨2.6%。12月份,福州、泉州市新建商品住宅销售价格同比分别上涨8.5%、1.5%,厦门市下降 0.4%。\n  \n  表2  2018年居民消费价格比上年涨跌幅度 \n  \n  指  标  全 省(%)  \n  城 市  农 村  \n  居民消费价格总水平  1.5  1.5  1.5  \n  食品烟酒  1.7  1.9  1.1  \n  衣着  -0.4  -0.9  1.1  \n  居住  1.9  1.9  1.9  \n  生活用品及服务  0.9  0.9  1.0  \n  交通和通信  1.2  1.0  1.6  \n  教育文化和娱乐  2.1  2.1  2.2  \n  医疗保健  2.1  2.1  1.9  \n  其他用品和服务  0.5  0.4  0.7  \n  表3  2018年福州、厦门、泉州市新建商品住宅 销售价格涨跌幅度(月度同比) \n  \n  月份  1月  2月  3月  4月  5月  6月  7月  8月  9月  10月  11月  12月  \n  福州  -2.3  -1.5  -1.8  -1.7  -2.8  -0.5  1.0  3.5  5.1  6.1  8.0  8.5  \n  厦门  2.3  2.2  0.1  0.4  1.2  0.7  0.5  0.3  0.5  0.6  -0.1  -0.4  \n  泉州  0.1  0.0  -0.4  0.0  0.1  -0.2  0.0  1.0  1.8  1.5  2.2  1.5  \n  全年全省一般公共预算总收入5045.43亿元,比上年增长7.4%,其中,地方一般公共预算收入3007.36亿元,增长7.1%;一般公共预算支出4836.67亿元,可比增长9.8%。全省(含厦门)税收收入(含海关代征)4824.1亿元,增长8.7%。\n  \n  二、农业 \n  全年农林牧渔业完成总产值4229.43亿元,比上年增长3.5%。粮食种植面积1250.27万亩,比上年增加0.44万亩,其中稻谷面积929.41万亩,减少13.47万亩;烟叶种植面积72.84万亩,减少6.28万亩;油料种植面积113.13万亩,增加4.44万亩;蔬菜种植面积837.49万亩,增加35.88万亩。\n  全年粮食产量498.58万吨,比上年增加11.43万吨,增长2.3%。其中,稻谷产量398.31万吨,增加5.12万吨,增长1.3%。 \n  \n  表4  2018年主要农产品产量 \n  \n  产品名称  产量(万吨)  比上年增长(%)  \n  粮食  498.58  2.3  \n  春收  21.61  4.8  \n  夏收  80.56  -5.7  \n  秋收  396.41  4.0  \n  油料  21.24  8.6  \n  其中:花生  20.32  8.5  \n  油菜籽  0.86  13.6  \n  糖料  26.13  -0.9  \n  甘蔗  26.13  -0.9  \n  烤烟  10.68  -8.1  \n  茶叶  41.83  5.9  \n  水果  683.11  5.3  \n  蔬菜  1366.70  5.8  \n  食用菌  126.31  2.6  \n  全年肉蛋奶总产量314.69万吨,比上年下降3.2%。肉类总产量256.06万吨,下降3.3%。其中,猪肉产量113.12万吨,下降11.9%;禽肉产量136.76万吨,增长4.5%;牛肉产量1.94万吨,增长12.3%;羊肉产量2.04万吨,增长5.6%。年末生猪存栏799.9万头,下降13.2%;生猪出栏1421.34万头,下降11.5%。牛奶产量13.82万吨,增长5.4%。\n  全年水产品产量782.12万吨,比上年增长5.0%。其中,淡水产品产量87.08万吨,增长6.0%;海洋捕捞216.22万吨,下降0.4%;海水养殖478.83万吨,增长7.5%。\n  全年新增、恢复有效灌溉面积19.76万亩,新增节水灌溉面积75.08万亩。\n  三、工业和建筑业 \n  全年全部工业增加值14183.20亿元,比上年增长8.9%。规模以上工业增加值增长9.1%。在规模以上工业中,分经济类型看,国有控股企业增长11.4%;国有企业增长7.8%,集体企业下降1.5%,股份制企业增长10.3%,外商及港澳台商投资企业增长6.9%;私营企业增长9.7%。分轻重看,轻工业增长8.9%,重工业增长9.2%。分门类看,采矿业增长7.8%,制造业增长8.9%,电力、热力、燃气及水生产和供应业增长11.9%。工业产品销售率97.16%,比上年下降0.15个百分点。\n  \n  规模以上工业的38个行业大类中有15个增加值增速在两位数。其中,计算机、通信和其他电子设备制造业增长14.2%,印刷和记录媒介复制业增长13.8%,燃气生产和供应业比上年增长12.7%,专用设备制造业增长12.4%,皮革、毛皮、羽毛及其制品和制鞋业增长10.7%,文教、工美、体育和娱乐用品制造业增长10.2%,家具制造业增长10.2%。规模以上工业中三大主导产业实现增加值增长8.3%。其中,机械装备产业增长7.7%;电子信息产业增长14.2%;石油化工产业增长5.6%。六大高耗能行业增长9.4%,占规模以上工业增加值的比重为25.2%。工业战略性新兴产业增长6.7%,占规模以上工业增加值的比重为21.1%。高技术制造业增长13.9%,占规模以上工业增加值的比重为11.3%。装备制造业增长9.7%,占规模以上工业增加值的比重为22.9%。\n  表5  2018年规模以上工业企业主要工业产品产量 \n  \n  产品名称  单位  产量  比上年增长(%)  \n  纱  万吨  569.21  12.2  \n  布  亿米  107.94  23.2  \n  化学纤维  万吨  694.88  3.8  \n  卷 烟  亿支  855.14  2.8  \n  彩色电视机  万台  979.49  2.9  \n  原 煤  万吨  917.70  -10.7  \n  发电量  亿千瓦时  2461.88  12.6  \n  其中:火电  亿千瓦时  1405.13  23.3  \n  水电  亿千瓦时  325.27  -21.8  \n  粗 钢  万吨  2100.70  11.6  \n  钢 材  万吨  2915.95  18.7  \n  十种有色金属  万吨  47.76  3.4  \n  其中:精炼铜(电解铜)  万吨  34.93  9.5  \n  原铝(电解铝)  万吨  14.06  -0.1  \n  水 泥  万吨  8783.18  7.6  \n  硫 酸(折100%)  万吨  226.69  20.7  \n  纯 碱(碳酸钙)  万吨  24.94  0.0  \n  烧 碱  万吨  37.06  3.4  \n  农用氮、磷、钾化学肥料(折纯)  万吨  68.16  12.5  \n  发电设备  万千瓦  7.96  -9.0  \n  汽 车  万辆  23.95  -14.8  \n  其中:轿车  万辆  0.89  -27.7  \n  集成电路  亿块  2.03  -6.9  \n  移动通信手持机  万台  1362.14  130.9  \n  微型计算机设备  万台  1183.63  20.6  \n  注:发电量为全社会口径。\n  全年规模以上工业企业实现利润3537.14亿元,比上年增长16.1%。其中国有控股企业376.55亿元,增长5.6%;国有企业1.44亿元,增长13.4倍,集体企业2.56亿元,下降7.2%,股份制企业2263.37亿元,增长19.2%,外商及港澳台商投资企业1231.28亿元,增长10.9%;私营企业1060.89亿元,增长19.6%。规模以上工业企业资产负债率51.1%,比上年下降1.0个百分点;每百元主营业务收入中的成本为86.17元,主营业务收入利润率为6.9%。\n  全年全社会建筑业实现增加值3080.96亿元,比上年增长6.6%。全省具有资质等级的总承包和专业承包建筑业企业完成建筑业总产值11548.82亿元,增长15.6%;实现利润385.40亿元,增长13.8%;税金总额382.53亿元,增长9.5%。\n  \n  四、固定资产投资 \n  全年固定资产投资比上年增长12.1%,其中,固定资产投资(不含跨区项目)增长11.5%。\n  在固定资产投资中,第一产业投资增长36.8%;第二产业投资增长17.8%,其中,工业投资增长17.4%;第三产业投资增长9.4%。基础设施投资增长7.8%,占固定资产投资的比重为30.9%。民间投资增长20.6%,占固定资产投资的比重为56.5%。高技术产业投资下降1.8%,占固定资产投资的比重为5.9%。从到位资金情况看,全年到位资金比上年增长4.9%。其中,国家预算资金增长6.2%,国内贷款下降0.5%,利用外资下降58.8%,自筹资金增长12.5%,其他资金下降1.3%。\n  \n  表6  2018年分行业固定资产投资情况 \n  \n  行  业  比上年增长(%)  \n  农、林、牧、渔业  36.1  \n  采矿业  -20.8  \n  制造业  22.3  \n  电力、燃气及水的生产和供应业  -4.9  \n  建筑业  39.8  \n  批发和零售业  32.1  \n  交通运输、仓储和邮政业  13.2  \n  住宿和餐饮业  30.8  \n  信息传输、软件和信息技术服务业  37.3  \n  金融业  29.6  \n  房地产业  2.7  \n  租赁和商务服务业  12.1  \n  科学研究和技术服务业  4.8  \n  水利、环境和公共设施管理业  4.0  \n  居民服务、修理和其他服务业  2.7  \n  教育  45.2  \n  卫生和社会工作  51.1  \n  文化、体育和娱乐业  75.3  \n  公共管理、社会保障和社会组织  16.8  \n  全年房地产开发投资4940.34亿元,比上年增长3.0%。其中,住宅投资3456.86亿元,增长6.8%;办公楼投资215.55亿元,下降23.7%;商业营业用房投资457.63亿元,下降17.7%。年末商品房待售面积1879.13万平方米,比上年末减少200.46万平方米。年末商品住宅待售面积522.87万平方米,比上年末减少120.91万平方米。\n2018年1月16日，塞尔维亚与科索沃进行了谈判。\n\n  全年新开工建设城镇保障性安居工程住房4.5万套(户),基本建成城镇保障性安居工程住房5.8万套。\n  表7  2018年房地产开发和销售主要指标完成情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  投资完成额  亿元  4940.34  3.0  \n  其中:住宅  亿元  3456.86  6.8  \n  其中:90平方米及以下  亿元  1054.47  7.6  \n  房屋施工面积  万平方米  32825.97  2.8  \n  其中:住宅  万平方米  21031.59  3.2  \n  房屋新开工面积  万平方米  7205.35  30.2  \n  其中:住宅  万平方米  5073.73  32.6  \n  房屋竣工面积  万平方米  3739.02  -12.4  \n  其中:住宅  万平方米  2347.24  -18.8  \n  房屋销售面积  万平方米  6213.40  6.1  \n  其中:住宅  万平方米  4781.58  5.6  \n  本年实际到位资金  亿元  6551.03  1.9  \n  其中:国内贷款  亿元  856.00  9.7  \n  其中:个人按揭贷款  亿元  1009.08  -16.1  \n  本年土地购置面积  万平方米  1286.82  40.4  \n  土地购置费  亿元  1968.52  40.2  \n  1150个在建省重点项目完成投资4737亿元。全年建成或部分建成160个项目,新开工230个项目。\n  五、国内贸易 \n  全年社会消费品零售总额14317.43亿元,比上年增长10.8%。按销售单位所在地统计,城镇消费品零售额12895.72亿元,增长10.5%;乡村消费品零售额1421.71亿元,增长13.3%。按消费形态统计,商品零售额12869.97亿元,增长10.9%;餐饮收入额1447.46亿元,增长10.0%。\n  \n  在限额以上企业商品零售额中,建筑及装潢材料类零售额比上年增长27.9%,粮油食品类增长21.4%,服装鞋帽针纺织品类增长19.7%,金银珠宝类增长19.2%,家具类增长18.6%,文化办公用品类增长15.7%,化妆品类增长13.7%,石油及制品类增长11.5%,日用品类增长11.1%,家用电器和音响器材类增长9.6%,汽车类增长7.7%,体育、娱乐用品类增长7.4%,通讯器材类增长4.6%。\n  六、对外经济 \n  全年进出口总额12354.3亿元,比上年增长6.6%。其中,出口7615.6亿元,增长7.1%;进口4738.7亿元,增长5.8%。进出口顺差2876.9亿元。\n  表8  2018年进出口主要分类情况 \n  \n  指  标  绝对数(亿元)  比上年增长(%)  \n  进出口总额  12354.3  6.6  \n  出口额  7615.6  7.1  \n  其中:一般贸易  5506.9  7.3  \n  加工贸易  1657.9  2.0  \n  其中:机电产品  2786.9  8.0  \n  其中:高新技术产品  1028.6  2.9  \n  进口额  4738.7  5.8  \n  其中:一般贸易  3417.1  5.4  \n  加工贸易  826.5  6.2  \n  其中:机电产品  1381.5  -1.1  \n  其中:高新技术产品  1044.1  -1.6  \n  表9  2018年对主要国家和地区进出口情况 \n  \n  国家和地区  出口额\n  (亿元)\n  比上年\n  增长(%)\n  进口额\n  (亿元)\n  比上年\n  增长(%)\n  美国  1600.4  11.0  433.2  -9.6  \n  欧盟  1364.2  8.0  341.6  -2.4  \n  东盟  1296.7  7.2  819.7  14.4  \n  日本  427.9  10.3  237.9  -14.2  \n  香港地区  496.4  4.5  6.5  50.5  \n  台湾地区  318.5  7.9  467.5  -2.5  \n  韩国  222.2  8.7  228.7  1.6  \n  沙特阿拉伯  63.6  -23.8  339.5  26.0  \n  \n  新设外商直接投资企业2419家,比上年增长18.5%。实际利用外商直接投资305.3亿元(折44.5亿美元),增长3.0%。\n  表10  2018年分行业外商直接投资情况 \n  \n  行业  实际利用金额(万元)  比上年增长(%)  \n  总计  3052867  3.0  \n  其中:农、林、牧、渔业  93180  -41.9  \n  制造业  1599815  0.5  \n  电力、燃气及水的生产和供应业  23289  -84.5  \n  交通运输、仓储和邮政业  83926  53.4  \n  批发和零售业  203534  -10.6  \n  房地产业  154202  -50.6  \n  租赁和商务服务业  217281  89.0  \n  居民服务、修理和其他服务业  4291  1943.3  \n  备案和核准对外直接投资项目246个,中方协议投资额55.2亿美元,分别比上年增长66.2%和57%。对外直接投资额28.4亿美元,增长70.5%。\n  全年对外承包工程完成营业额10.8亿美元,下降4.2%;对外劳务合作劳务人员实际收入总额8.9亿美元,下降0.4%。\n  七、交通、邮电和旅游 \n  全年交通运输、仓储和邮政业实现增加值1984.35亿元,比上年增长7.2%。公路通车里程108901公里,比上年增长0.8%。其中海西高速公路网通车里程5344公里,增长2.2%。铁路营业里程3509.5公里,增长10.1%。全年货运量136974.24万吨,比上年增长3.6%。货物周转量7652.89亿吨公里,增长12.8%。\n  表11  2018年各种运输方式完成货物运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  货运量  万吨  136974.24  3.6  \n  铁路  万吨  3517.72  10.8  \n  公路  万吨  96575.59  1.0  \n  水运  万吨  36853.96  10.2  \n  民航  万吨  26.98  9.5  \n  货物周转量  亿吨公里  7652.89  12.8  \n  铁路  亿吨公里  147.35  8.4  \n  公路  亿吨公里  1289.52  6.2  \n  水运  亿吨公里  6209.37  14.4  \n  民航  亿吨公里  6.64  23.4  \n  全年客运量51434.96万人,比上年下降4.9%。旅客周转量1153.28亿人公里,增长6.5%。\n  表12  2018年各种运输方式完成旅客运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  客运量  万人  51434.96  -4.9  \n  铁路  万人  12095.81  4.1  \n  公路  万人  34080.68  -9.3  \n  水运  万人  1928.64  0.2  \n  民航  万人  3329.82  12.4  \n  旅客周转量  亿人公里  1153.28  6.5  \n  铁路  亿人公里  385.20  3.1  \n  公路  亿人公里  212.04  -6.9  \n  水运  亿人公里  2.75  -1.1  \n  民航  亿人公里  553.29  15.6  \n  全年沿海港口新增货物通过能力3363万吨;沿海港口完成货物吞吐量5.58亿吨,比上年增长7.3%。其中外贸货物吞吐量2.10亿吨,比上年增长3.3%。集装箱吞吐量1647.03万标箱,增长5.3%。\n  年末全省汽车保有量623.9万辆(含三轮汽车和低速货车),比上年末增长26.0%,其中私人汽车保有量545.2万辆,增长10.6%。全省轿车保有量380.8万辆,增长11.4%,其中私人轿车保有量350.7万辆,增长10.3%。\n  全年完成邮电业务总量2523.03亿元,比上年增长93.9%。其中,邮政业务总量499.04亿元,增长27.0%;电信业务总量2023.99亿元,增长122.9%。邮政业全年完成邮政函件业务9300.68万件,包裹业务56.61万件,快递业务量21.16亿件。年末全省电话用户总数5286.3万户,增长4.2%,电话普及率为135.2%。其中,固定电话用户732.7万户,减少5.7%,固定电话普及率为18.7%;移动电话用户4553.5万户,增长6%,移动电话普及率为116.4%。4G电话用户3633.4万户,净增518.7万户。(固定)互联网宽带接入用户1629.1万户,增长18.6%,固定宽带家庭普及率为115.8%,比上年提高25.7个百分点;其中,光纤宽带用户1424.9万户,增长33.4%。移动互联网用户3844.9万户,增长9.6%,移动宽带用户普及率为100.9%,比上年提高10.7个百分点。\n  \n  全年接待入境游客901.24万人次,比上年增长16.2%。其中,接待外国人344.19万人次,增长17.5%;台湾同胞363.50万人次,增长16.0%;港澳同胞193.55万人次,增长14.4%。在入境旅游者中,过夜游客813.59万人次,增长17.6%。国际旅游外汇收入90.92亿美元,增长19.8%。全年接待国内旅游人数45138.93万人次,增长20.3%;国内旅游收入6032.95亿元,增长32.0%。旅游总收入6634.58亿元,增长30.5%。\n2018年3月1日，塞尔维亚表示愿意与科索沃合作。\n\n  八、金融 \n  年末全省金融机构本外币各项存款余额45812.94亿元,比上年末增长3.9%;金融机构本外币各项贷款余额46503.45亿元,增长11.0%。\n  全年农村合作金融机构人民币各项贷款余额3865.44亿元,比上年末增长12.0%。中资金融机构人民币个人消费贷款余额16137.44亿元,比上年末增长13.4%。\n  表13  2018年全部金融机构本外币存贷款情况 \n  \n  指  标  年末数(亿元)  比上年末增长(%)  \n  各项存款余额  45812.94  3.9  \n  其中:住户存款  18532.74  10.0  \n  非金融企业存款  14050.63  -4.6  \n  其中:人民币存款  44677.70  4.4  \n  各项贷款余额  46503.45  11.0  \n  其中:短期贷款  15027.47  3.9  \n  中长期贷款  28674.55  12.1  \n  其中:人民币贷款  45173.87  11.6  \n  年末境内A股上市公司133家,比上年增加2家,总市值14122.70亿元,下降14.7%;B股上市公司数量为1家,总市值4.34亿元,下降45.6%。\n  全年内外资保险公司保费收入1081.4亿元,比上年增长4.8%,其中:财产险保费收入315.3亿元;人身险保费收入766.1亿元(寿险保费收入562.3亿元,健康险和意外伤害险保费收入203.8亿元)。支付各类赔款及给付346.3亿元,其中:财产险赔款174.1亿元;寿险业务给付112亿元;健康险和意外伤害险赔款及给付60.2亿元。\n  九、人民生活和社会保障 \n  全年全省居民人均可支配收入32644元,比上年增长8.6%;扣除价格因素,实际增长7.0%。按常住地分,农村居民人均可支配收入17821元,比上年增长9.1%,扣除价格因素,实际增长 7.5%;城镇居民人均可支配收入42121元,比上年增长8.0%,扣除价格因素,实际增长6.4%。\n  全省居民人均生活消费支出22996元,比上年增长8.2%,扣除价格因素,实际增长6.6%。按常住地分,农村居民人均生活消费支出14943元,增长6.7%,扣除价格因素,实际增长5.1%;城镇居民人均生活消费支出28145元,增长8.3%,扣除价格因素,实际增长6.7%。 \n  \n  年末参加城镇基本养老保险人数1074.26万人,比上年增加51.95万人。其中参保职工883.66万人,参保的离退休人员190.6万人。全省企业参加基本养老保险离退休人员为144.02万人,全部实现养老金按时足额发放。全省参加基本医疗保险人数3804.72万人,其中参保职工853.04万人,参保的城乡居民2951.68万人。全省参加失业保险人数570.27万人,比上年减少42.06万人。\n  年末全省领取失业保险金人数5.05万人,比上年增加0.12万人;全省纳入城市最低生活保障的居民6.08万人,减少0.73万人;纳入农村最低生活保障的居民37.81万人,减少1.27万人;城乡特困人员6.97万人。全年全省脱贫0.4万人,\"造福工程\"搬迁1.6万人。\n  年末全省养老机构床位数增至19.2万张,每千名老人拥有养老床位约33张。全省建立社区服务中心(站)3713个。全年销售社会福利彩票50.13亿元,筹集福利彩票公益金14.95亿元。\n  十、教育和科学技术 \n  全年研究生教育招生1.88万人,在校生5.31万人,毕业生1.22万人。普通高等教育招生23.86万人,在校生77.24万人,毕业生20.43万人。普通高校毕业生就业率为97%。中等职业教育(不含技工校)招生12.29万人,在校生33.58万人,毕业生10.78万人。全省普通高中招生21.08万人,在校生63.39万人,毕业生20.61万人。初中招生45.17万人,在校生128.71万人,毕业生37.14万人。普通小学招生60.84万人,在校生321.39万人,毕业生45.70万人。特殊教育招生0.40万人,在校生2.51万人,毕业生0.39万人。学前教育在园幼儿168.41万人。九年义务教育巩固率为98.6%,高中阶段毛入学率为96.8%。 \n  \n  全年研究与试验发展(R&D)经费支出预计620亿元,比上年增长14.2%,占全省生产总值的1.7%。全省已布局建设18家省级产业技术研究院和31家省级产业技术创新战略联盟。拥有国家重点实验室10个、省级重点实验室204个、国家级工程技术研究中心7个、省级工程技术研究中心527个、省级新型研发机构70家。建设国家专业化众创空间备案示范3家、国家备案众创空间52家、省级众创空间215家。科技企业孵化器备案166家,孵化面积325.8万平方米,在孵企业5003家、在孵企业员工总数8.47万人。全省入库备案科技型中小企业3344家、省高新技术企业904家。新认定高新技术企业746家,总数3800家;新增国家企业技术中心8家、国家技术创新示范企业6家,新认定省级企业技术中心50家;新认定省科技小巨人领军企业522家,总数1823家。全省专利申请166610件,专利授权102622件,分别比上年增长30.1%和50.2%。其中,发明专利申请37216件,增长40.7%,发明专利授权9858件,增长13.1%。截至2018年底,全省共拥有有效发明专利38522件,比上年增长24.2%;每万人口发明专利拥有量9.85件,比上年增加1.85件。全年共登记技术合同7753项,成交额110.9亿元。 \n  \n  年末全省共有1201家机构通过检验检测资质认定,比上年增加195家,国家产品质量监督检验中心23个,省级产品质量监督检验中心40个。全省现有独立的认证机构11个、分支机构19个,累计获得59621张产品及管理体系认证证书。全省共有法定计量技术机构69个,全年强制检定工作计量器具120万台(件)。全年制修订国家标准39项、行业标准16项、地方标准96项,累计全省共制修订国家标准1091项、行业标准1132项、地方标准1815项。\n  年末全省共有国家级地面气象观测站70个,高空气象观测站4个,天气雷达站9个,风廓线雷达站17个,大型海洋气象浮标站7个。共有地震前兆台站(点)43个,前兆测项405个,测震台站(点)120个,强震动观测站位(点)123个,GPS观测基准站61个。共有716个海洋环境监测站位、13个重点监测区域、17个重点海域的17个生物质量样品、5个海漂垃圾监测区域,共有29个海上水文气象观测浮标站位、36个沿海自动验潮站、1对中程高频地波雷达站、1套卫星遥感监测系统、1套海床基观测系统、5套船基自动站、1套海岛基站。审批通过公开出版地图185件。\n  十一、文化、卫生和体育 \n  年末全省文化系统共有国有艺术表演团体69个,公共图书馆90个,文化馆97个,博物馆98个,非国有博物馆26个。文化系统各类艺术表演团体演出1.06万场,本年度首演剧目128个,观众637.88万人次,其中:政府采购公益性演出4705场,观众255.34万人次;各级公共图书馆组织各类讲座2185次,书刊文献外借3171.45万册,总流通人数2752.15万人次;各级文化馆组织举办展览1821个,组织文艺活动3611次、培训班13989期和公益性讲座1763次,服务847.51万人次;博物馆举办313个基本陈列和695个临时展览,共有3186.76万人次参观,其中:未成年人参观940.05万人次。举办社会教育活动1605次,共有166.81万人次参加。\n  年末共有影院295个,银幕1659块,年度电影票房20.1亿元。广播电台4座,电视台5座,广播电视台68座,教育电视台1座。有线电视用户732.97万户,数字化率100%。年末广播节目综合覆盖率为99.04%;电视节目综合覆盖率为99.19%。\n  全年出版图书4274种,总印数1.08亿册;报纸46种(不含校报、副版),总印数7.97亿份;期刊176种,总印数0.24亿册;音像电子出版物74.12万盒(张)。年末全省共有各级各类档案馆120个。\n  年末全省共有各级各类医疗卫生机构2.76万个,其中医院646个,卫生院881个,村卫生室18379个。年末共有卫生技术人员24.50万人,其中执业(助理)医师9.04万人,注册护士10.88万人。年末共有医疗机构床位19.35万张,乡村医生和卫生员2.5万人。 \n  \n  全年我省运动员在世界三大赛中共获得8金6银5铜,在全国最高级别比赛中获得41金39银45铜。在第十八届亚运会上,我省12人次获得金牌、8人次获得银牌、4人次获得铜牌。为民办实事项目新建110个城市社区多功能运动场、50个社区室内健身房、60个笼式足球场和30个门球场、3个体育公园。开展全民健身运动会3700场,共有180万人次参加。全省社会体育指导员人数达到8万余名。新增省级体育产业特色基地4个、示范单位13个、示范项目12个。全年销售体育彩票121.03亿元。\n  十二、资源、环境和安全生产 \n  初步核算,全年能源消费总量13480万吨标准煤,比上年增长4.6%;万元地区生产总值能耗下降3.4%。全社会用电量增长9.5%。 \n  \n  全年植树造林总面积120.83万亩,占任务的120.8%,其中,人工荒山造林9.78万亩(含非规划林地造林2.56万亩);人工迹地更新面积65.94万亩,低产低效林改造23.54万亩。全省商品材产量573.54万立方米,比上年增长7.4%。全省毛竹产量5.95亿根,增长7.4%。\n2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。\n全省城市(县城)新增建成区绿地面积2326公顷,建成区绿地率39.95%;全省城市(县城)新增公园绿地面积950公顷,人均公园绿地面积14.3平方米。\n  全省森林覆盖率66.80%。共有国家湿地公园8处。思明区、将乐县、武夷山市、柘荣县、永春县等5个县(市、区)获得第二批国家生态文明建设示范县(区)称号。截至2018年底,厦门、泉州获得国家生态市命名,福州通过国家生态市考核验收,漳州、三明获得省级生态市命名;65个县(市、区)获得省级以上生态县(市、区)命名,其中32个县获得国家级生态县命名;519个乡镇(街道)获得国家级生态乡镇(街道)命名。共建立自然保护区93个,其中国家级17个、省级23个,自然保护区总面积45.5万公顷。有风景名胜区54处,其中国家级风景名胜区19处、省级35处,风景名胜区总面积23.6万公顷。\n  全省12条主要河流整体水质为优,Ⅰ类-Ⅲ类水质比例为95.8%;监测的122个县级以上集中式生活饮用水源地水质达标率为100%。\n  全省9个设区市、平潭综合实验区、12个县级市和长乐区、建阳区城市空气质量达到国家《环境空气质量标准》(GB3095-2012)标准。上述24个城市中,区域声环境质量\"较好\"的城市13个;道路交通声环境质量\"好\"的城市12个,\"较好\"的城市9个。\n  市县生活垃圾无害化处理率98.87%,市县污水处理率92.4%。\n  全省地质灾害造成直接经济损失827.8万元。全省共发生森林火灾89起,其中一般火灾15起,较大火灾74起;受害面积577.4公顷;森林火灾发生率和受害率分别为1次/十万公顷和0.06‰,未发生重特大森林火灾。全年海洋灾害造成直接经济损失约11.54亿元,增长815.8%。全年发生(现)海洋赤潮5次,比上年减少2次;累计赤潮面积38平方公里,比上年减少82.2平方公里。\n  全省发生各类生产安全事故1726起、死亡939人,分别比上年下降3.1%和8.0%,其中较大以上事故12起、死亡46人,分别下降42.9%和43.2%;没有发生重特大事故。亿元地区生产总值生产安全事故死亡人数0.026人,比上年下降18.7%。\n  \n  注:1.本公报未包括金门县和连江县的马祖列岛。\n  2.本公报所列数据为初步统计数,部分合计数或相对数由于单位取舍不同而产生的计算误差,均不做机械调整。\n  3.本公报福建省地区生产总值、各产业增加值按现价计算,增长速度按可比价格计算。\n  4.本公报卫生机构数含村卫生室。\n  资料来源:\n  本公报中户籍人口、民用汽车数据来自省公安厅;就业、登记失业率、社会保障数据来自省人社厅;财政数据来自省财政厅;税收数据来自省税务局;保障性住房、城市污水处理、公园绿地面积数据来自省住建厅;重点项目投资数据来自省发改委;货物进出口数据来自福州海关;网络零售额、外商直接投资、对外直接投资、对外承包工程、对外劳务合作等数据来自省商务厅;公路里程、公路运输、水运、港口货物吞吐量数据来自省交通运输厅;铁路数据来自中国铁路南昌局集团有限公司;邮政业务数据来自省邮政管理局;互联网业务收入、电话用户、电信业务总量等数据来自省通信管理局;旅游数据、文化数据来自省文旅厅;货币金融数据来自人行福州中心支行;上市公司数据来自福建证监局;保险业数据来自福建银保监局;教育数据来自省教育厅;产业技术重大研发平台、工程技术研究中心、技术合同等数据来自省科技厅;企业技术中心数据来自省工信厅;专利数据来自省知识产权局;质量检验数据来自省市场监督管理局;气象数据来自省气象局;地震数据来自省地震局;测绘数据来自省测绘局;各类地质灾害数据来自省自然资源厅;水产品产量数据、海洋数据来自省海洋渔业局;广播、电视数据来自省广电局;报纸、期刊、图书数据来自省新闻出版局、电影数据来自省电影局、档案数据来自省档案局;卫生数据来自省卫健委;体育数据来自省体育局;低保数据来自省民政厅;扶贫、造福搬迁工程数据来自省农业农村厅;林业数据来自省林业局;环境监测数据来自省生态环境厅;水资源数据来自省水利厅;安全生产数据来自省应急管理厅;其他数据来自福建省统计局和国家统计局福建调查总队。\n\n问题:2018年1月16日至3月27日期间，塞尔维亚对科索沃采取了哪些关键行动？", "output": "在2018年1月16日至3月27日期间，塞尔维亚对科索沃采取了几项关键行动，包括：\n\n- 2018年1月16日，塞尔维亚与科索沃进行了谈判。\n- 2018年1月21日，塞尔维亚表示希望与科索沃进行外交合作，包括政策支持。\n- 2018年3月1日，塞尔维亚表示愿意与科索沃合作。\n- 2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。", "text_with_needles": "2018年福建省国民经济和社会发展统计公报 \n[福建省人民政府门户网站][本网]  2019-02-28 09:38  字号:T  |  T  废止,失效( 宣布失效)一、综合 \n  初步核算,全年实现地区生产总值35804.04亿元,比上年增长8.3%。其中,第一产业增加值2379.82亿元,增长3.5%;第二产业增加值17232.36亿元,增长8.5%;第三产业增加值16191.86亿元,增长8.8%。第一产业增加值占地区生产总值的比重为6.7%,第二产业增加值比重为48.1%,第三产业增加值比重为45.2%。全年人均地区生产总值91197元,比上年增长7.4%。\n  \n  全年全省互联网重点企业实现互联网业务收入610亿元,比上年增长15.1%。\n  全年全省网络零售额3616.7亿元,比上年增长29.0%。\n2018年1月21日，塞尔维亚宣布希望与科索沃进行外交合作，包括政策支持。\n限额以上批发和零售企业实现网上零售额995.55亿元,增长19.5%。\n  年末全省常住人口3941万人,比上年末增加30万人。其中,城镇常住人口2594万人,占总人口比重(常住人口城镇化率)为65.8%,比上年末提高1个百分点。全年出生人口52万人,出生率为13.2‰;死亡人口24.4万人,死亡率为6.2‰;自然增长率为7.0‰。年末全省户籍人口3861.3万人,比上年末增加53.7万人。\n  表1  2018年年末人口数及其构成 \n  \n  指  标  年末数(万人)  比重(%)  \n  常住人口  3941  100.0  \n  其中:城镇  2594  65.8  \n  乡村  1347  34.2  \n  其中:男性  2016  51.2  \n  女性  1925  48.8  \n  其中:0-14岁  658  16.7  \n  15-64岁  2928  74.3  \n  65岁及以上  355  9.0  \n  全年城镇新增就业59.8万人,有17万名城镇失业人员实现了再就业。年末城镇登记失业率为3.71%,比上年末下降0.16个百分点。\n  \n  全年居民消费价格比上年上涨1.5%。工业生产者出厂价格上涨2.8%。工业生产者购进价格上涨2.8%。固定资产投资价格上涨4.9%。农产品生产者价格上涨2.6%。12月份,福州、泉州市新建商品住宅销售价格同比分别上涨8.5%、1.5%,厦门市下降 0.4%。\n  \n  表2  2018年居民消费价格比上年涨跌幅度 \n  \n  指  标  全 省(%)  \n  城 市  农 村  \n  居民消费价格总水平  1.5  1.5  1.5  \n  食品烟酒  1.7  1.9  1.1  \n  衣着  -0.4  -0.9  1.1  \n  居住  1.9  1.9  1.9  \n  生活用品及服务  0.9  0.9  1.0  \n  交通和通信  1.2  1.0  1.6  \n  教育文化和娱乐  2.1  2.1  2.2  \n  医疗保健  2.1  2.1  1.9  \n  其他用品和服务  0.5  0.4  0.7  \n  表3  2018年福州、厦门、泉州市新建商品住宅 销售价格涨跌幅度(月度同比) \n  \n  月份  1月  2月  3月  4月  5月  6月  7月  8月  9月  10月  11月  12月  \n  福州  -2.3  -1.5  -1.8  -1.7  -2.8  -0.5  1.0  3.5  5.1  6.1  8.0  8.5  \n  厦门  2.3  2.2  0.1  0.4  1.2  0.7  0.5  0.3  0.5  0.6  -0.1  -0.4  \n  泉州  0.1  0.0  -0.4  0.0  0.1  -0.2  0.0  1.0  1.8  1.5  2.2  1.5  \n  全年全省一般公共预算总收入5045.43亿元,比上年增长7.4%,其中,地方一般公共预算收入3007.36亿元,增长7.1%;一般公共预算支出4836.67亿元,可比增长9.8%。全省(含厦门)税收收入(含海关代征)4824.1亿元,增长8.7%。\n  \n  二、农业 \n  全年农林牧渔业完成总产值4229.43亿元,比上年增长3.5%。粮食种植面积1250.27万亩,比上年增加0.44万亩,其中稻谷面积929.41万亩,减少13.47万亩;烟叶种植面积72.84万亩,减少6.28万亩;油料种植面积113.13万亩,增加4.44万亩;蔬菜种植面积837.49万亩,增加35.88万亩。\n  全年粮食产量498.58万吨,比上年增加11.43万吨,增长2.3%。其中,稻谷产量398.31万吨,增加5.12万吨,增长1.3%。 \n  \n  表4  2018年主要农产品产量 \n  \n  产品名称  产量(万吨)  比上年增长(%)  \n  粮食  498.58  2.3  \n  春收  21.61  4.8  \n  夏收  80.56  -5.7  \n  秋收  396.41  4.0  \n  油料  21.24  8.6  \n  其中:花生  20.32  8.5  \n  油菜籽  0.86  13.6  \n  糖料  26.13  -0.9  \n  甘蔗  26.13  -0.9  \n  烤烟  10.68  -8.1  \n  茶叶  41.83  5.9  \n  水果  683.11  5.3  \n  蔬菜  1366.70  5.8  \n  食用菌  126.31  2.6  \n  全年肉蛋奶总产量314.69万吨,比上年下降3.2%。肉类总产量256.06万吨,下降3.3%。其中,猪肉产量113.12万吨,下降11.9%;禽肉产量136.76万吨,增长4.5%;牛肉产量1.94万吨,增长12.3%;羊肉产量2.04万吨,增长5.6%。年末生猪存栏799.9万头,下降13.2%;生猪出栏1421.34万头,下降11.5%。牛奶产量13.82万吨,增长5.4%。\n  全年水产品产量782.12万吨,比上年增长5.0%。其中,淡水产品产量87.08万吨,增长6.0%;海洋捕捞216.22万吨,下降0.4%;海水养殖478.83万吨,增长7.5%。\n  全年新增、恢复有效灌溉面积19.76万亩,新增节水灌溉面积75.08万亩。\n  三、工业和建筑业 \n  全年全部工业增加值14183.20亿元,比上年增长8.9%。规模以上工业增加值增长9.1%。在规模以上工业中,分经济类型看,国有控股企业增长11.4%;国有企业增长7.8%,集体企业下降1.5%,股份制企业增长10.3%,外商及港澳台商投资企业增长6.9%;私营企业增长9.7%。分轻重看,轻工业增长8.9%,重工业增长9.2%。分门类看,采矿业增长7.8%,制造业增长8.9%,电力、热力、燃气及水生产和供应业增长11.9%。工业产品销售率97.16%,比上年下降0.15个百分点。\n  \n  规模以上工业的38个行业大类中有15个增加值增速在两位数。其中,计算机、通信和其他电子设备制造业增长14.2%,印刷和记录媒介复制业增长13.8%,燃气生产和供应业比上年增长12.7%,专用设备制造业增长12.4%,皮革、毛皮、羽毛及其制品和制鞋业增长10.7%,文教、工美、体育和娱乐用品制造业增长10.2%,家具制造业增长10.2%。规模以上工业中三大主导产业实现增加值增长8.3%。其中,机械装备产业增长7.7%;电子信息产业增长14.2%;石油化工产业增长5.6%。六大高耗能行业增长9.4%,占规模以上工业增加值的比重为25.2%。工业战略性新兴产业增长6.7%,占规模以上工业增加值的比重为21.1%。高技术制造业增长13.9%,占规模以上工业增加值的比重为11.3%。装备制造业增长9.7%,占规模以上工业增加值的比重为22.9%。\n  表5  2018年规模以上工业企业主要工业产品产量 \n  \n  产品名称  单位  产量  比上年增长(%)  \n  纱  万吨  569.21  12.2  \n  布  亿米  107.94  23.2  \n  化学纤维  万吨  694.88  3.8  \n  卷 烟  亿支  855.14  2.8  \n  彩色电视机  万台  979.49  2.9  \n  原 煤  万吨  917.70  -10.7  \n  发电量  亿千瓦时  2461.88  12.6  \n  其中:火电  亿千瓦时  1405.13  23.3  \n  水电  亿千瓦时  325.27  -21.8  \n  粗 钢  万吨  2100.70  11.6  \n  钢 材  万吨  2915.95  18.7  \n  十种有色金属  万吨  47.76  3.4  \n  其中:精炼铜(电解铜)  万吨  34.93  9.5  \n  原铝(电解铝)  万吨  14.06  -0.1  \n  水 泥  万吨  8783.18  7.6  \n  硫 酸(折100%)  万吨  226.69  20.7  \n  纯 碱(碳酸钙)  万吨  24.94  0.0  \n  烧 碱  万吨  37.06  3.4  \n  农用氮、磷、钾化学肥料(折纯)  万吨  68.16  12.5  \n  发电设备  万千瓦  7.96  -9.0  \n  汽 车  万辆  23.95  -14.8  \n  其中:轿车  万辆  0.89  -27.7  \n  集成电路  亿块  2.03  -6.9  \n  移动通信手持机  万台  1362.14  130.9  \n  微型计算机设备  万台  1183.63  20.6  \n  注:发电量为全社会口径。\n  全年规模以上工业企业实现利润3537.14亿元,比上年增长16.1%。其中国有控股企业376.55亿元,增长5.6%;国有企业1.44亿元,增长13.4倍,集体企业2.56亿元,下降7.2%,股份制企业2263.37亿元,增长19.2%,外商及港澳台商投资企业1231.28亿元,增长10.9%;私营企业1060.89亿元,增长19.6%。规模以上工业企业资产负债率51.1%,比上年下降1.0个百分点;每百元主营业务收入中的成本为86.17元,主营业务收入利润率为6.9%。\n  全年全社会建筑业实现增加值3080.96亿元,比上年增长6.6%。全省具有资质等级的总承包和专业承包建筑业企业完成建筑业总产值11548.82亿元,增长15.6%;实现利润385.40亿元,增长13.8%;税金总额382.53亿元,增长9.5%。\n  \n  四、固定资产投资 \n  全年固定资产投资比上年增长12.1%,其中,固定资产投资(不含跨区项目)增长11.5%。\n  在固定资产投资中,第一产业投资增长36.8%;第二产业投资增长17.8%,其中,工业投资增长17.4%;第三产业投资增长9.4%。基础设施投资增长7.8%,占固定资产投资的比重为30.9%。民间投资增长20.6%,占固定资产投资的比重为56.5%。高技术产业投资下降1.8%,占固定资产投资的比重为5.9%。从到位资金情况看,全年到位资金比上年增长4.9%。其中,国家预算资金增长6.2%,国内贷款下降0.5%,利用外资下降58.8%,自筹资金增长12.5%,其他资金下降1.3%。\n  \n  表6  2018年分行业固定资产投资情况 \n  \n  行  业  比上年增长(%)  \n  农、林、牧、渔业  36.1  \n  采矿业  -20.8  \n  制造业  22.3  \n  电力、燃气及水的生产和供应业  -4.9  \n  建筑业  39.8  \n  批发和零售业  32.1  \n  交通运输、仓储和邮政业  13.2  \n  住宿和餐饮业  30.8  \n  信息传输、软件和信息技术服务业  37.3  \n  金融业  29.6  \n  房地产业  2.7  \n  租赁和商务服务业  12.1  \n  科学研究和技术服务业  4.8  \n  水利、环境和公共设施管理业  4.0  \n  居民服务、修理和其他服务业  2.7  \n  教育  45.2  \n  卫生和社会工作  51.1  \n  文化、体育和娱乐业  75.3  \n  公共管理、社会保障和社会组织  16.8  \n  全年房地产开发投资4940.34亿元,比上年增长3.0%。其中,住宅投资3456.86亿元,增长6.8%;办公楼投资215.55亿元,下降23.7%;商业营业用房投资457.63亿元,下降17.7%。年末商品房待售面积1879.13万平方米,比上年末减少200.46万平方米。年末商品住宅待售面积522.87万平方米,比上年末减少120.91万平方米。\n2018年1月16日，塞尔维亚与科索沃进行了谈判。\n\n  全年新开工建设城镇保障性安居工程住房4.5万套(户),基本建成城镇保障性安居工程住房5.8万套。\n  表7  2018年房地产开发和销售主要指标完成情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  投资完成额  亿元  4940.34  3.0  \n  其中:住宅  亿元  3456.86  6.8  \n  其中:90平方米及以下  亿元  1054.47  7.6  \n  房屋施工面积  万平方米  32825.97  2.8  \n  其中:住宅  万平方米  21031.59  3.2  \n  房屋新开工面积  万平方米  7205.35  30.2  \n  其中:住宅  万平方米  5073.73  32.6  \n  房屋竣工面积  万平方米  3739.02  -12.4  \n  其中:住宅  万平方米  2347.24  -18.8  \n  房屋销售面积  万平方米  6213.40  6.1  \n  其中:住宅  万平方米  4781.58  5.6  \n  本年实际到位资金  亿元  6551.03  1.9  \n  其中:国内贷款  亿元  856.00  9.7  \n  其中:个人按揭贷款  亿元  1009.08  -16.1  \n  本年土地购置面积  万平方米  1286.82  40.4  \n  土地购置费  亿元  1968.52  40.2  \n  1150个在建省重点项目完成投资4737亿元。全年建成或部分建成160个项目,新开工230个项目。\n  五、国内贸易 \n  全年社会消费品零售总额14317.43亿元,比上年增长10.8%。按销售单位所在地统计,城镇消费品零售额12895.72亿元,增长10.5%;乡村消费品零售额1421.71亿元,增长13.3%。按消费形态统计,商品零售额12869.97亿元,增长10.9%;餐饮收入额1447.46亿元,增长10.0%。\n  \n  在限额以上企业商品零售额中,建筑及装潢材料类零售额比上年增长27.9%,粮油食品类增长21.4%,服装鞋帽针纺织品类增长19.7%,金银珠宝类增长19.2%,家具类增长18.6%,文化办公用品类增长15.7%,化妆品类增长13.7%,石油及制品类增长11.5%,日用品类增长11.1%,家用电器和音响器材类增长9.6%,汽车类增长7.7%,体育、娱乐用品类增长7.4%,通讯器材类增长4.6%。\n  六、对外经济 \n  全年进出口总额12354.3亿元,比上年增长6.6%。其中,出口7615.6亿元,增长7.1%;进口4738.7亿元,增长5.8%。进出口顺差2876.9亿元。\n  表8  2018年进出口主要分类情况 \n  \n  指  标  绝对数(亿元)  比上年增长(%)  \n  进出口总额  12354.3  6.6  \n  出口额  7615.6  7.1  \n  其中:一般贸易  5506.9  7.3  \n  加工贸易  1657.9  2.0  \n  其中:机电产品  2786.9  8.0  \n  其中:高新技术产品  1028.6  2.9  \n  进口额  4738.7  5.8  \n  其中:一般贸易  3417.1  5.4  \n  加工贸易  826.5  6.2  \n  其中:机电产品  1381.5  -1.1  \n  其中:高新技术产品  1044.1  -1.6  \n  表9  2018年对主要国家和地区进出口情况 \n  \n  国家和地区  出口额\n  (亿元)\n  比上年\n  增长(%)\n  进口额\n  (亿元)\n  比上年\n  增长(%)\n  美国  1600.4  11.0  433.2  -9.6  \n  欧盟  1364.2  8.0  341.6  -2.4  \n  东盟  1296.7  7.2  819.7  14.4  \n  日本  427.9  10.3  237.9  -14.2  \n  香港地区  496.4  4.5  6.5  50.5  \n  台湾地区  318.5  7.9  467.5  -2.5  \n  韩国  222.2  8.7  228.7  1.6  \n  沙特阿拉伯  63.6  -23.8  339.5  26.0  \n  \n  新设外商直接投资企业2419家,比上年增长18.5%。实际利用外商直接投资305.3亿元(折44.5亿美元),增长3.0%。\n  表10  2018年分行业外商直接投资情况 \n  \n  行业  实际利用金额(万元)  比上年增长(%)  \n  总计  3052867  3.0  \n  其中:农、林、牧、渔业  93180  -41.9  \n  制造业  1599815  0.5  \n  电力、燃气及水的生产和供应业  23289  -84.5  \n  交通运输、仓储和邮政业  83926  53.4  \n  批发和零售业  203534  -10.6  \n  房地产业  154202  -50.6  \n  租赁和商务服务业  217281  89.0  \n  居民服务、修理和其他服务业  4291  1943.3  \n  备案和核准对外直接投资项目246个,中方协议投资额55.2亿美元,分别比上年增长66.2%和57%。对外直接投资额28.4亿美元,增长70.5%。\n  全年对外承包工程完成营业额10.8亿美元,下降4.2%;对外劳务合作劳务人员实际收入总额8.9亿美元,下降0.4%。\n  七、交通、邮电和旅游 \n  全年交通运输、仓储和邮政业实现增加值1984.35亿元,比上年增长7.2%。公路通车里程108901公里,比上年增长0.8%。其中海西高速公路网通车里程5344公里,增长2.2%。铁路营业里程3509.5公里,增长10.1%。全年货运量136974.24万吨,比上年增长3.6%。货物周转量7652.89亿吨公里,增长12.8%。\n  表11  2018年各种运输方式完成货物运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  货运量  万吨  136974.24  3.6  \n  铁路  万吨  3517.72  10.8  \n  公路  万吨  96575.59  1.0  \n  水运  万吨  36853.96  10.2  \n  民航  万吨  26.98  9.5  \n  货物周转量  亿吨公里  7652.89  12.8  \n  铁路  亿吨公里  147.35  8.4  \n  公路  亿吨公里  1289.52  6.2  \n  水运  亿吨公里  6209.37  14.4  \n  民航  亿吨公里  6.64  23.4  \n  全年客运量51434.96万人,比上年下降4.9%。旅客周转量1153.28亿人公里,增长6.5%。\n  表12  2018年各种运输方式完成旅客运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  客运量  万人  51434.96  -4.9  \n  铁路  万人  12095.81  4.1  \n  公路  万人  34080.68  -9.3  \n  水运  万人  1928.64  0.2  \n  民航  万人  3329.82  12.4  \n  旅客周转量  亿人公里  1153.28  6.5  \n  铁路  亿人公里  385.20  3.1  \n  公路  亿人公里  212.04  -6.9  \n  水运  亿人公里  2.75  -1.1  \n  民航  亿人公里  553.29  15.6  \n  全年沿海港口新增货物通过能力3363万吨;沿海港口完成货物吞吐量5.58亿吨,比上年增长7.3%。其中外贸货物吞吐量2.10亿吨,比上年增长3.3%。集装箱吞吐量1647.03万标箱,增长5.3%。\n  年末全省汽车保有量623.9万辆(含三轮汽车和低速货车),比上年末增长26.0%,其中私人汽车保有量545.2万辆,增长10.6%。全省轿车保有量380.8万辆,增长11.4%,其中私人轿车保有量350.7万辆,增长10.3%。\n  全年完成邮电业务总量2523.03亿元,比上年增长93.9%。其中,邮政业务总量499.04亿元,增长27.0%;电信业务总量2023.99亿元,增长122.9%。邮政业全年完成邮政函件业务9300.68万件,包裹业务56.61万件,快递业务量21.16亿件。年末全省电话用户总数5286.3万户,增长4.2%,电话普及率为135.2%。其中,固定电话用户732.7万户,减少5.7%,固定电话普及率为18.7%;移动电话用户4553.5万户,增长6%,移动电话普及率为116.4%。4G电话用户3633.4万户,净增518.7万户。(固定)互联网宽带接入用户1629.1万户,增长18.6%,固定宽带家庭普及率为115.8%,比上年提高25.7个百分点;其中,光纤宽带用户1424.9万户,增长33.4%。移动互联网用户3844.9万户,增长9.6%,移动宽带用户普及率为100.9%,比上年提高10.7个百分点。\n  \n  全年接待入境游客901.24万人次,比上年增长16.2%。其中,接待外国人344.19万人次,增长17.5%;台湾同胞363.50万人次,增长16.0%;港澳同胞193.55万人次,增长14.4%。在入境旅游者中,过夜游客813.59万人次,增长17.6%。国际旅游外汇收入90.92亿美元,增长19.8%。全年接待国内旅游人数45138.93万人次,增长20.3%;国内旅游收入6032.95亿元,增长32.0%。旅游总收入6634.58亿元,增长30.5%。\n2018年3月1日，塞尔维亚表示愿意与科索沃合作。\n\n  八、金融 \n  年末全省金融机构本外币各项存款余额45812.94亿元,比上年末增长3.9%;金融机构本外币各项贷款余额46503.45亿元,增长11.0%。\n  全年农村合作金融机构人民币各项贷款余额3865.44亿元,比上年末增长12.0%。中资金融机构人民币个人消费贷款余额16137.44亿元,比上年末增长13.4%。\n  表13  2018年全部金融机构本外币存贷款情况 \n  \n  指  标  年末数(亿元)  比上年末增长(%)  \n  各项存款余额  45812.94  3.9  \n  其中:住户存款  18532.74  10.0  \n  非金融企业存款  14050.63  -4.6  \n  其中:人民币存款  44677.70  4.4  \n  各项贷款余额  46503.45  11.0  \n  其中:短期贷款  15027.47  3.9  \n  中长期贷款  28674.55  12.1  \n  其中:人民币贷款  45173.87  11.6  \n  年末境内A股上市公司133家,比上年增加2家,总市值14122.70亿元,下降14.7%;B股上市公司数量为1家,总市值4.34亿元,下降45.6%。\n  全年内外资保险公司保费收入1081.4亿元,比上年增长4.8%,其中:财产险保费收入315.3亿元;人身险保费收入766.1亿元(寿险保费收入562.3亿元,健康险和意外伤害险保费收入203.8亿元)。支付各类赔款及给付346.3亿元,其中:财产险赔款174.1亿元;寿险业务给付112亿元;健康险和意外伤害险赔款及给付60.2亿元。\n  九、人民生活和社会保障 \n  全年全省居民人均可支配收入32644元,比上年增长8.6%;扣除价格因素,实际增长7.0%。按常住地分,农村居民人均可支配收入17821元,比上年增长9.1%,扣除价格因素,实际增长 7.5%;城镇居民人均可支配收入42121元,比上年增长8.0%,扣除价格因素,实际增长6.4%。\n  全省居民人均生活消费支出22996元,比上年增长8.2%,扣除价格因素,实际增长6.6%。按常住地分,农村居民人均生活消费支出14943元,增长6.7%,扣除价格因素,实际增长5.1%;城镇居民人均生活消费支出28145元,增长8.3%,扣除价格因素,实际增长6.7%。 \n  \n  年末参加城镇基本养老保险人数1074.26万人,比上年增加51.95万人。其中参保职工883.66万人,参保的离退休人员190.6万人。全省企业参加基本养老保险离退休人员为144.02万人,全部实现养老金按时足额发放。全省参加基本医疗保险人数3804.72万人,其中参保职工853.04万人,参保的城乡居民2951.68万人。全省参加失业保险人数570.27万人,比上年减少42.06万人。\n  年末全省领取失业保险金人数5.05万人,比上年增加0.12万人;全省纳入城市最低生活保障的居民6.08万人,减少0.73万人;纳入农村最低生活保障的居民37.81万人,减少1.27万人;城乡特困人员6.97万人。全年全省脱贫0.4万人,\"造福工程\"搬迁1.6万人。\n  年末全省养老机构床位数增至19.2万张,每千名老人拥有养老床位约33张。全省建立社区服务中心(站)3713个。全年销售社会福利彩票50.13亿元,筹集福利彩票公益金14.95亿元。\n  十、教育和科学技术 \n  全年研究生教育招生1.88万人,在校生5.31万人,毕业生1.22万人。普通高等教育招生23.86万人,在校生77.24万人,毕业生20.43万人。普通高校毕业生就业率为97%。中等职业教育(不含技工校)招生12.29万人,在校生33.58万人,毕业生10.78万人。全省普通高中招生21.08万人,在校生63.39万人,毕业生20.61万人。初中招生45.17万人,在校生128.71万人,毕业生37.14万人。普通小学招生60.84万人,在校生321.39万人,毕业生45.70万人。特殊教育招生0.40万人,在校生2.51万人,毕业生0.39万人。学前教育在园幼儿168.41万人。九年义务教育巩固率为98.6%,高中阶段毛入学率为96.8%。 \n  \n  全年研究与试验发展(R&D)经费支出预计620亿元,比上年增长14.2%,占全省生产总值的1.7%。全省已布局建设18家省级产业技术研究院和31家省级产业技术创新战略联盟。拥有国家重点实验室10个、省级重点实验室204个、国家级工程技术研究中心7个、省级工程技术研究中心527个、省级新型研发机构70家。建设国家专业化众创空间备案示范3家、国家备案众创空间52家、省级众创空间215家。科技企业孵化器备案166家,孵化面积325.8万平方米,在孵企业5003家、在孵企业员工总数8.47万人。全省入库备案科技型中小企业3344家、省高新技术企业904家。新认定高新技术企业746家,总数3800家;新增国家企业技术中心8家、国家技术创新示范企业6家,新认定省级企业技术中心50家;新认定省科技小巨人领军企业522家,总数1823家。全省专利申请166610件,专利授权102622件,分别比上年增长30.1%和50.2%。其中,发明专利申请37216件,增长40.7%,发明专利授权9858件,增长13.1%。截至2018年底,全省共拥有有效发明专利38522件,比上年增长24.2%;每万人口发明专利拥有量9.85件,比上年增加1.85件。全年共登记技术合同7753项,成交额110.9亿元。 \n  \n  年末全省共有1201家机构通过检验检测资质认定,比上年增加195家,国家产品质量监督检验中心23个,省级产品质量监督检验中心40个。全省现有独立的认证机构11个、分支机构19个,累计获得59621张产品及管理体系认证证书。全省共有法定计量技术机构69个,全年强制检定工作计量器具120万台(件)。全年制修订国家标准39项、行业标准16项、地方标准96项,累计全省共制修订国家标准1091项、行业标准1132项、地方标准1815项。\n  年末全省共有国家级地面气象观测站70个,高空气象观测站4个,天气雷达站9个,风廓线雷达站17个,大型海洋气象浮标站7个。共有地震前兆台站(点)43个,前兆测项405个,测震台站(点)120个,强震动观测站位(点)123个,GPS观测基准站61个。共有716个海洋环境监测站位、13个重点监测区域、17个重点海域的17个生物质量样品、5个海漂垃圾监测区域,共有29个海上水文气象观测浮标站位、36个沿海自动验潮站、1对中程高频地波雷达站、1套卫星遥感监测系统、1套海床基观测系统、5套船基自动站、1套海岛基站。审批通过公开出版地图185件。\n  十一、文化、卫生和体育 \n  年末全省文化系统共有国有艺术表演团体69个,公共图书馆90个,文化馆97个,博物馆98个,非国有博物馆26个。文化系统各类艺术表演团体演出1.06万场,本年度首演剧目128个,观众637.88万人次,其中:政府采购公益性演出4705场,观众255.34万人次;各级公共图书馆组织各类讲座2185次,书刊文献外借3171.45万册,总流通人数2752.15万人次;各级文化馆组织举办展览1821个,组织文艺活动3611次、培训班13989期和公益性讲座1763次,服务847.51万人次;博物馆举办313个基本陈列和695个临时展览,共有3186.76万人次参观,其中:未成年人参观940.05万人次。举办社会教育活动1605次,共有166.81万人次参加。\n  年末共有影院295个,银幕1659块,年度电影票房20.1亿元。广播电台4座,电视台5座,广播电视台68座,教育电视台1座。有线电视用户732.97万户,数字化率100%。年末广播节目综合覆盖率为99.04%;电视节目综合覆盖率为99.19%。\n  全年出版图书4274种,总印数1.08亿册;报纸46种(不含校报、副版),总印数7.97亿份;期刊176种,总印数0.24亿册;音像电子出版物74.12万盒(张)。年末全省共有各级各类档案馆120个。\n  年末全省共有各级各类医疗卫生机构2.76万个,其中医院646个,卫生院881个,村卫生室18379个。年末共有卫生技术人员24.50万人,其中执业(助理)医师9.04万人,注册护士10.88万人。年末共有医疗机构床位19.35万张,乡村医生和卫生员2.5万人。 \n  \n  全年我省运动员在世界三大赛中共获得8金6银5铜,在全国最高级别比赛中获得41金39银45铜。在第十八届亚运会上,我省12人次获得金牌、8人次获得银牌、4人次获得铜牌。为民办实事项目新建110个城市社区多功能运动场、50个社区室内健身房、60个笼式足球场和30个门球场、3个体育公园。开展全民健身运动会3700场,共有180万人次参加。全省社会体育指导员人数达到8万余名。新增省级体育产业特色基地4个、示范单位13个、示范项目12个。全年销售体育彩票121.03亿元。\n  十二、资源、环境和安全生产 \n  初步核算,全年能源消费总量13480万吨标准煤,比上年增长4.6%;万元地区生产总值能耗下降3.4%。全社会用电量增长9.5%。 \n  \n  全年植树造林总面积120.83万亩,占任务的120.8%,其中,人工荒山造林9.78万亩(含非规划林地造林2.56万亩);人工迹地更新面积65.94万亩,低产低效林改造23.54万亩。全省商品材产量573.54万立方米,比上年增长7.4%。全省毛竹产量5.95亿根,增长7.4%。\n2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。\n全省城市(县城)新增建成区绿地面积2326公顷,建成区绿地率39.95%;全省城市(县城)新增公园绿地面积950公顷,人均公园绿地面积14.3平方米。\n  全省森林覆盖率66.80%。共有国家湿地公园8处。思明区、将乐县、武夷山市、柘荣县、永春县等5个县(市、区)获得第二批国家生态文明建设示范县(区)称号。截至2018年底,厦门、泉州获得国家生态市命名,福州通过国家生态市考核验收,漳州、三明获得省级生态市命名;65个县(市、区)获得省级以上生态县(市、区)命名,其中32个县获得国家级生态县命名;519个乡镇(街道)获得国家级生态乡镇(街道)命名。共建立自然保护区93个,其中国家级17个、省级23个,自然保护区总面积45.5万公顷。有风景名胜区54处,其中国家级风景名胜区19处、省级35处,风景名胜区总面积23.6万公顷。\n  全省12条主要河流整体水质为优,Ⅰ类-Ⅲ类水质比例为95.8%;监测的122个县级以上集中式生活饮用水源地水质达标率为100%。\n  全省9个设区市、平潭综合实验区、12个县级市和长乐区、建阳区城市空气质量达到国家《环境空气质量标准》(GB3095-2012)标准。上述24个城市中,区域声环境质量\"较好\"的城市13个;道路交通声环境质量\"好\"的城市12个,\"较好\"的城市9个。\n  市县生活垃圾无害化处理率98.87%,市县污水处理率92.4%。\n  全省地质灾害造成直接经济损失827.8万元。全省共发生森林火灾89起,其中一般火灾15起,较大火灾74起;受害面积577.4公顷;森林火灾发生率和受害率分别为1次/十万公顷和0.06‰,未发生重特大森林火灾。全年海洋灾害造成直接经济损失约11.54亿元,增长815.8%。全年发生(现)海洋赤潮5次,比上年减少2次;累计赤潮面积38平方公里,比上年减少82.2平方公里。\n  全省发生各类生产安全事故1726起、死亡939人,分别比上年下降3.1%和8.0%,其中较大以上事故12起、死亡46人,分别下降42.9%和43.2%;没有发生重特大事故。亿元地区生产总值生产安全事故死亡人数0.026人,比上年下降18.7%。\n  \n  注:1.本公报未包括金门县和连江县的马祖列岛。\n  2.本公报所列数据为初步统计数,部分合计数或相对数由于单位取舍不同而产生的计算误差,均不做机械调整。\n  3.本公报福建省地区生产总值、各产业增加值按现价计算,增长速度按可比价格计算。\n  4.本公报卫生机构数含村卫生室。\n  资料来源:\n  本公报中户籍人口、民用汽车数据来自省公安厅;就业、登记失业率、社会保障数据来自省人社厅;财政数据来自省财政厅;税收数据来自省税务局;保障性住房、城市污水处理、公园绿地面积数据来自省住建厅;重点项目投资数据来自省发改委;货物进出口数据来自福州海关;网络零售额、外商直接投资、对外直接投资、对外承包工程、对外劳务合作等数据来自省商务厅;公路里程、公路运输、水运、港口货物吞吐量数据来自省交通运输厅;铁路数据来自中国铁路南昌局集团有限公司;邮政业务数据来自省邮政管理局;互联网业务收入、电话用户、电信业务总量等数据来自省通信管理局;旅游数据、文化数据来自省文旅厅;货币金融数据来自人行福州中心支行;上市公司数据来自福建证监局;保险业数据来自福建银保监局;教育数据来自省教育厅;产业技术重大研发平台、工程技术研究中心、技术合同等数据来自省科技厅;企业技术中心数据来自省工信厅;专利数据来自省知识产权局;质量检验数据来自省市场监督管理局;气象数据来自省气象局;地震数据来自省地震局;测绘数据来自省测绘局;各类地质灾害数据来自省自然资源厅;水产品产量数据、海洋数据来自省海洋渔业局;广播、电视数据来自省广电局;报纸、期刊、图书数据来自省新闻出版局、电影数据来自省电影局、档案数据来自省档案局;卫生数据来自省卫健委;体育数据来自省体育局;低保数据来自省民政厅;扶贫、造福搬迁工程数据来自省农业农村厅;林业数据来自省林业局;环境监测数据来自省生态环境厅;水资源数据来自省水利厅;安全生产数据来自省应急管理厅;其他数据来自福建省统计局和国家统计局福建调查总队。", "meta_QA": {"md5": "ed61178d149a438723a57ca46bd96759", "question": "2018年1月16日至3月27日期间，塞尔维亚对科索沃采取了哪些关键行动？", "answer": "在2018年1月16日至3月27日期间，塞尔维亚对科索沃采取了几项关键行动，包括：\n\n- 2018年1月16日，塞尔维亚与科索沃进行了谈判。\n- 2018年1月21日，塞尔维亚表示希望与科索沃进行外交合作，包括政策支持。\n- 2018年3月1日，塞尔维亚表示愿意与科索沃合作。\n- 2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。", "raw_needles": ["2018年1月16日，塞尔维亚与科索沃进行了谈判。", "2018年1月21日，塞尔维亚宣布希望与科索沃进行外交合作，包括政策支持。", "2018年3月1日，塞尔维亚表示愿意与科索沃合作。", "2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。"], "needles": ["2018年1月21日，塞尔维亚宣布希望与科索沃进行外交合作，包括政策支持。", "2018年1月16日，塞尔维亚与科索沃进行了谈判。", "2018年3月1日，塞尔维亚表示愿意与科索沃合作。", "2018年3月27日，塞尔维亚参与了一项违反科索沃相关规范和法律的行动。"], "source": "icews18", "ppl": "tkg"}, "meta_text": {"md5": "9ee0e31e310761b91f96b3d995937c35", "raw_text": "2018年福建省国民经济和社会发展统计公报 \n[福建省人民政府门户网站][本网]  2019-02-28 09:38  字号:T  |  T  废止,失效( 宣布失效)一、综合 \n  初步核算,全年实现地区生产总值35804.04亿元,比上年增长8.3%。其中,第一产业增加值2379.82亿元,增长3.5%;第二产业增加值17232.36亿元,增长8.5%;第三产业增加值16191.86亿元,增长8.8%。第一产业增加值占地区生产总值的比重为6.7%,第二产业增加值比重为48.1%,第三产业增加值比重为45.2%。全年人均地区生产总值91197元,比上年增长7.4%。\n  \n  全年全省互联网重点企业实现互联网业务收入610亿元,比上年增长15.1%。\n  全年全省网络零售额3616.7亿元,比上年增长29.0%。限额以上批发和零售企业实现网上零售额995.55亿元,增长19.5%。\n  年末全省常住人口3941万人,比上年末增加30万人。其中,城镇常住人口2594万人,占总人口比重(常住人口城镇化率)为65.8%,比上年末提高1个百分点。全年出生人口52万人,出生率为13.2‰;死亡人口24.4万人,死亡率为6.2‰;自然增长率为7.0‰。年末全省户籍人口3861.3万人,比上年末增加53.7万人。\n  表1  2018年年末人口数及其构成 \n  \n  指  标  年末数(万人)  比重(%)  \n  常住人口  3941  100.0  \n  其中:城镇  2594  65.8  \n  乡村  1347  34.2  \n  其中:男性  2016  51.2  \n  女性  1925  48.8  \n  其中:0-14岁  658  16.7  \n  15-64岁  2928  74.3  \n  65岁及以上  355  9.0  \n  全年城镇新增就业59.8万人,有17万名城镇失业人员实现了再就业。年末城镇登记失业率为3.71%,比上年末下降0.16个百分点。\n  \n  全年居民消费价格比上年上涨1.5%。工业生产者出厂价格上涨2.8%。工业生产者购进价格上涨2.8%。固定资产投资价格上涨4.9%。农产品生产者价格上涨2.6%。12月份,福州、泉州市新建商品住宅销售价格同比分别上涨8.5%、1.5%,厦门市下降 0.4%。\n  \n  表2  2018年居民消费价格比上年涨跌幅度 \n  \n  指  标  全 省(%)  \n  城 市  农 村  \n  居民消费价格总水平  1.5  1.5  1.5  \n  食品烟酒  1.7  1.9  1.1  \n  衣着  -0.4  -0.9  1.1  \n  居住  1.9  1.9  1.9  \n  生活用品及服务  0.9  0.9  1.0  \n  交通和通信  1.2  1.0  1.6  \n  教育文化和娱乐  2.1  2.1  2.2  \n  医疗保健  2.1  2.1  1.9  \n  其他用品和服务  0.5  0.4  0.7  \n  表3  2018年福州、厦门、泉州市新建商品住宅 销售价格涨跌幅度(月度同比) \n  \n  月份  1月  2月  3月  4月  5月  6月  7月  8月  9月  10月  11月  12月  \n  福州  -2.3  -1.5  -1.8  -1.7  -2.8  -0.5  1.0  3.5  5.1  6.1  8.0  8.5  \n  厦门  2.3  2.2  0.1  0.4  1.2  0.7  0.5  0.3  0.5  0.6  -0.1  -0.4  \n  泉州  0.1  0.0  -0.4  0.0  0.1  -0.2  0.0  1.0  1.8  1.5  2.2  1.5  \n  全年全省一般公共预算总收入5045.43亿元,比上年增长7.4%,其中,地方一般公共预算收入3007.36亿元,增长7.1%;一般公共预算支出4836.67亿元,可比增长9.8%。全省(含厦门)税收收入(含海关代征)4824.1亿元,增长8.7%。\n  \n  二、农业 \n  全年农林牧渔业完成总产值4229.43亿元,比上年增长3.5%。粮食种植面积1250.27万亩,比上年增加0.44万亩,其中稻谷面积929.41万亩,减少13.47万亩;烟叶种植面积72.84万亩,减少6.28万亩;油料种植面积113.13万亩,增加4.44万亩;蔬菜种植面积837.49万亩,增加35.88万亩。\n  全年粮食产量498.58万吨,比上年增加11.43万吨,增长2.3%。其中,稻谷产量398.31万吨,增加5.12万吨,增长1.3%。 \n  \n  表4  2018年主要农产品产量 \n  \n  产品名称  产量(万吨)  比上年增长(%)  \n  粮食  498.58  2.3  \n  春收  21.61  4.8  \n  夏收  80.56  -5.7  \n  秋收  396.41  4.0  \n  油料  21.24  8.6  \n  其中:花生  20.32  8.5  \n  油菜籽  0.86  13.6  \n  糖料  26.13  -0.9  \n  甘蔗  26.13  -0.9  \n  烤烟  10.68  -8.1  \n  茶叶  41.83  5.9  \n  水果  683.11  5.3  \n  蔬菜  1366.70  5.8  \n  食用菌  126.31  2.6  \n  全年肉蛋奶总产量314.69万吨,比上年下降3.2%。肉类总产量256.06万吨,下降3.3%。其中,猪肉产量113.12万吨,下降11.9%;禽肉产量136.76万吨,增长4.5%;牛肉产量1.94万吨,增长12.3%;羊肉产量2.04万吨,增长5.6%。年末生猪存栏799.9万头,下降13.2%;生猪出栏1421.34万头,下降11.5%。牛奶产量13.82万吨,增长5.4%。\n  全年水产品产量782.12万吨,比上年增长5.0%。其中,淡水产品产量87.08万吨,增长6.0%;海洋捕捞216.22万吨,下降0.4%;海水养殖478.83万吨,增长7.5%。\n  全年新增、恢复有效灌溉面积19.76万亩,新增节水灌溉面积75.08万亩。\n  三、工业和建筑业 \n  全年全部工业增加值14183.20亿元,比上年增长8.9%。规模以上工业增加值增长9.1%。在规模以上工业中,分经济类型看,国有控股企业增长11.4%;国有企业增长7.8%,集体企业下降1.5%,股份制企业增长10.3%,外商及港澳台商投资企业增长6.9%;私营企业增长9.7%。分轻重看,轻工业增长8.9%,重工业增长9.2%。分门类看,采矿业增长7.8%,制造业增长8.9%,电力、热力、燃气及水生产和供应业增长11.9%。工业产品销售率97.16%,比上年下降0.15个百分点。\n  \n  规模以上工业的38个行业大类中有15个增加值增速在两位数。其中,计算机、通信和其他电子设备制造业增长14.2%,印刷和记录媒介复制业增长13.8%,燃气生产和供应业比上年增长12.7%,专用设备制造业增长12.4%,皮革、毛皮、羽毛及其制品和制鞋业增长10.7%,文教、工美、体育和娱乐用品制造业增长10.2%,家具制造业增长10.2%。规模以上工业中三大主导产业实现增加值增长8.3%。其中,机械装备产业增长7.7%;电子信息产业增长14.2%;石油化工产业增长5.6%。六大高耗能行业增长9.4%,占规模以上工业增加值的比重为25.2%。工业战略性新兴产业增长6.7%,占规模以上工业增加值的比重为21.1%。高技术制造业增长13.9%,占规模以上工业增加值的比重为11.3%。装备制造业增长9.7%,占规模以上工业增加值的比重为22.9%。\n  表5  2018年规模以上工业企业主要工业产品产量 \n  \n  产品名称  单位  产量  比上年增长(%)  \n  纱  万吨  569.21  12.2  \n  布  亿米  107.94  23.2  \n  化学纤维  万吨  694.88  3.8  \n  卷 烟  亿支  855.14  2.8  \n  彩色电视机  万台  979.49  2.9  \n  原 煤  万吨  917.70  -10.7  \n  发电量  亿千瓦时  2461.88  12.6  \n  其中:火电  亿千瓦时  1405.13  23.3  \n  水电  亿千瓦时  325.27  -21.8  \n  粗 钢  万吨  2100.70  11.6  \n  钢 材  万吨  2915.95  18.7  \n  十种有色金属  万吨  47.76  3.4  \n  其中:精炼铜(电解铜)  万吨  34.93  9.5  \n  原铝(电解铝)  万吨  14.06  -0.1  \n  水 泥  万吨  8783.18  7.6  \n  硫 酸(折100%)  万吨  226.69  20.7  \n  纯 碱(碳酸钙)  万吨  24.94  0.0  \n  烧 碱  万吨  37.06  3.4  \n  农用氮、磷、钾化学肥料(折纯)  万吨  68.16  12.5  \n  发电设备  万千瓦  7.96  -9.0  \n  汽 车  万辆  23.95  -14.8  \n  其中:轿车  万辆  0.89  -27.7  \n  集成电路  亿块  2.03  -6.9  \n  移动通信手持机  万台  1362.14  130.9  \n  微型计算机设备  万台  1183.63  20.6  \n  注:发电量为全社会口径。\n  全年规模以上工业企业实现利润3537.14亿元,比上年增长16.1%。其中国有控股企业376.55亿元,增长5.6%;国有企业1.44亿元,增长13.4倍,集体企业2.56亿元,下降7.2%,股份制企业2263.37亿元,增长19.2%,外商及港澳台商投资企业1231.28亿元,增长10.9%;私营企业1060.89亿元,增长19.6%。规模以上工业企业资产负债率51.1%,比上年下降1.0个百分点;每百元主营业务收入中的成本为86.17元,主营业务收入利润率为6.9%。\n  全年全社会建筑业实现增加值3080.96亿元,比上年增长6.6%。全省具有资质等级的总承包和专业承包建筑业企业完成建筑业总产值11548.82亿元,增长15.6%;实现利润385.40亿元,增长13.8%;税金总额382.53亿元,增长9.5%。\n  \n  四、固定资产投资 \n  全年固定资产投资比上年增长12.1%,其中,固定资产投资(不含跨区项目)增长11.5%。\n  在固定资产投资中,第一产业投资增长36.8%;第二产业投资增长17.8%,其中,工业投资增长17.4%;第三产业投资增长9.4%。基础设施投资增长7.8%,占固定资产投资的比重为30.9%。民间投资增长20.6%,占固定资产投资的比重为56.5%。高技术产业投资下降1.8%,占固定资产投资的比重为5.9%。从到位资金情况看,全年到位资金比上年增长4.9%。其中,国家预算资金增长6.2%,国内贷款下降0.5%,利用外资下降58.8%,自筹资金增长12.5%,其他资金下降1.3%。\n  \n  表6  2018年分行业固定资产投资情况 \n  \n  行  业  比上年增长(%)  \n  农、林、牧、渔业  36.1  \n  采矿业  -20.8  \n  制造业  22.3  \n  电力、燃气及水的生产和供应业  -4.9  \n  建筑业  39.8  \n  批发和零售业  32.1  \n  交通运输、仓储和邮政业  13.2  \n  住宿和餐饮业  30.8  \n  信息传输、软件和信息技术服务业  37.3  \n  金融业  29.6  \n  房地产业  2.7  \n  租赁和商务服务业  12.1  \n  科学研究和技术服务业  4.8  \n  水利、环境和公共设施管理业  4.0  \n  居民服务、修理和其他服务业  2.7  \n  教育  45.2  \n  卫生和社会工作  51.1  \n  文化、体育和娱乐业  75.3  \n  公共管理、社会保障和社会组织  16.8  \n  全年房地产开发投资4940.34亿元,比上年增长3.0%。其中,住宅投资3456.86亿元,增长6.8%;办公楼投资215.55亿元,下降23.7%;商业营业用房投资457.63亿元,下降17.7%。年末商品房待售面积1879.13万平方米,比上年末减少200.46万平方米。年末商品住宅待售面积522.87万平方米,比上年末减少120.91万平方米。\n  全年新开工建设城镇保障性安居工程住房4.5万套(户),基本建成城镇保障性安居工程住房5.8万套。\n  表7  2018年房地产开发和销售主要指标完成情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  投资完成额  亿元  4940.34  3.0  \n  其中:住宅  亿元  3456.86  6.8  \n  其中:90平方米及以下  亿元  1054.47  7.6  \n  房屋施工面积  万平方米  32825.97  2.8  \n  其中:住宅  万平方米  21031.59  3.2  \n  房屋新开工面积  万平方米  7205.35  30.2  \n  其中:住宅  万平方米  5073.73  32.6  \n  房屋竣工面积  万平方米  3739.02  -12.4  \n  其中:住宅  万平方米  2347.24  -18.8  \n  房屋销售面积  万平方米  6213.40  6.1  \n  其中:住宅  万平方米  4781.58  5.6  \n  本年实际到位资金  亿元  6551.03  1.9  \n  其中:国内贷款  亿元  856.00  9.7  \n  其中:个人按揭贷款  亿元  1009.08  -16.1  \n  本年土地购置面积  万平方米  1286.82  40.4  \n  土地购置费  亿元  1968.52  40.2  \n  1150个在建省重点项目完成投资4737亿元。全年建成或部分建成160个项目,新开工230个项目。\n  五、国内贸易 \n  全年社会消费品零售总额14317.43亿元,比上年增长10.8%。按销售单位所在地统计,城镇消费品零售额12895.72亿元,增长10.5%;乡村消费品零售额1421.71亿元,增长13.3%。按消费形态统计,商品零售额12869.97亿元,增长10.9%;餐饮收入额1447.46亿元,增长10.0%。\n  \n  在限额以上企业商品零售额中,建筑及装潢材料类零售额比上年增长27.9%,粮油食品类增长21.4%,服装鞋帽针纺织品类增长19.7%,金银珠宝类增长19.2%,家具类增长18.6%,文化办公用品类增长15.7%,化妆品类增长13.7%,石油及制品类增长11.5%,日用品类增长11.1%,家用电器和音响器材类增长9.6%,汽车类增长7.7%,体育、娱乐用品类增长7.4%,通讯器材类增长4.6%。\n  六、对外经济 \n  全年进出口总额12354.3亿元,比上年增长6.6%。其中,出口7615.6亿元,增长7.1%;进口4738.7亿元,增长5.8%。进出口顺差2876.9亿元。\n  表8  2018年进出口主要分类情况 \n  \n  指  标  绝对数(亿元)  比上年增长(%)  \n  进出口总额  12354.3  6.6  \n  出口额  7615.6  7.1  \n  其中:一般贸易  5506.9  7.3  \n  加工贸易  1657.9  2.0  \n  其中:机电产品  2786.9  8.0  \n  其中:高新技术产品  1028.6  2.9  \n  进口额  4738.7  5.8  \n  其中:一般贸易  3417.1  5.4  \n  加工贸易  826.5  6.2  \n  其中:机电产品  1381.5  -1.1  \n  其中:高新技术产品  1044.1  -1.6  \n  表9  2018年对主要国家和地区进出口情况 \n  \n  国家和地区  出口额\n  (亿元)\n  比上年\n  增长(%)\n  进口额\n  (亿元)\n  比上年\n  增长(%)\n  美国  1600.4  11.0  433.2  -9.6  \n  欧盟  1364.2  8.0  341.6  -2.4  \n  东盟  1296.7  7.2  819.7  14.4  \n  日本  427.9  10.3  237.9  -14.2  \n  香港地区  496.4  4.5  6.5  50.5  \n  台湾地区  318.5  7.9  467.5  -2.5  \n  韩国  222.2  8.7  228.7  1.6  \n  沙特阿拉伯  63.6  -23.8  339.5  26.0  \n  \n  新设外商直接投资企业2419家,比上年增长18.5%。实际利用外商直接投资305.3亿元(折44.5亿美元),增长3.0%。\n  表10  2018年分行业外商直接投资情况 \n  \n  行业  实际利用金额(万元)  比上年增长(%)  \n  总计  3052867  3.0  \n  其中:农、林、牧、渔业  93180  -41.9  \n  制造业  1599815  0.5  \n  电力、燃气及水的生产和供应业  23289  -84.5  \n  交通运输、仓储和邮政业  83926  53.4  \n  批发和零售业  203534  -10.6  \n  房地产业  154202  -50.6  \n  租赁和商务服务业  217281  89.0  \n  居民服务、修理和其他服务业  4291  1943.3  \n  备案和核准对外直接投资项目246个,中方协议投资额55.2亿美元,分别比上年增长66.2%和57%。对外直接投资额28.4亿美元,增长70.5%。\n  全年对外承包工程完成营业额10.8亿美元,下降4.2%;对外劳务合作劳务人员实际收入总额8.9亿美元,下降0.4%。\n  七、交通、邮电和旅游 \n  全年交通运输、仓储和邮政业实现增加值1984.35亿元,比上年增长7.2%。公路通车里程108901公里,比上年增长0.8%。其中海西高速公路网通车里程5344公里,增长2.2%。铁路营业里程3509.5公里,增长10.1%。全年货运量136974.24万吨,比上年增长3.6%。货物周转量7652.89亿吨公里,增长12.8%。\n  表11  2018年各种运输方式完成货物运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  货运量  万吨  136974.24  3.6  \n  铁路  万吨  3517.72  10.8  \n  公路  万吨  96575.59  1.0  \n  水运  万吨  36853.96  10.2  \n  民航  万吨  26.98  9.5  \n  货物周转量  亿吨公里  7652.89  12.8  \n  铁路  亿吨公里  147.35  8.4  \n  公路  亿吨公里  1289.52  6.2  \n  水运  亿吨公里  6209.37  14.4  \n  民航  亿吨公里  6.64  23.4  \n  全年客运量51434.96万人,比上年下降4.9%。旅客周转量1153.28亿人公里,增长6.5%。\n  表12  2018年各种运输方式完成旅客运输量情况 \n  \n  指  标  单位  绝对数  比上年增长(%)  \n  客运量  万人  51434.96  -4.9  \n  铁路  万人  12095.81  4.1  \n  公路  万人  34080.68  -9.3  \n  水运  万人  1928.64  0.2  \n  民航  万人  3329.82  12.4  \n  旅客周转量  亿人公里  1153.28  6.5  \n  铁路  亿人公里  385.20  3.1  \n  公路  亿人公里  212.04  -6.9  \n  水运  亿人公里  2.75  -1.1  \n  民航  亿人公里  553.29  15.6  \n  全年沿海港口新增货物通过能力3363万吨;沿海港口完成货物吞吐量5.58亿吨,比上年增长7.3%。其中外贸货物吞吐量2.10亿吨,比上年增长3.3%。集装箱吞吐量1647.03万标箱,增长5.3%。\n  年末全省汽车保有量623.9万辆(含三轮汽车和低速货车),比上年末增长26.0%,其中私人汽车保有量545.2万辆,增长10.6%。全省轿车保有量380.8万辆,增长11.4%,其中私人轿车保有量350.7万辆,增长10.3%。\n  全年完成邮电业务总量2523.03亿元,比上年增长93.9%。其中,邮政业务总量499.04亿元,增长27.0%;电信业务总量2023.99亿元,增长122.9%。邮政业全年完成邮政函件业务9300.68万件,包裹业务56.61万件,快递业务量21.16亿件。年末全省电话用户总数5286.3万户,增长4.2%,电话普及率为135.2%。其中,固定电话用户732.7万户,减少5.7%,固定电话普及率为18.7%;移动电话用户4553.5万户,增长6%,移动电话普及率为116.4%。4G电话用户3633.4万户,净增518.7万户。(固定)互联网宽带接入用户1629.1万户,增长18.6%,固定宽带家庭普及率为115.8%,比上年提高25.7个百分点;其中,光纤宽带用户1424.9万户,增长33.4%。移动互联网用户3844.9万户,增长9.6%,移动宽带用户普及率为100.9%,比上年提高10.7个百分点。\n  \n  全年接待入境游客901.24万人次,比上年增长16.2%。其中,接待外国人344.19万人次,增长17.5%;台湾同胞363.50万人次,增长16.0%;港澳同胞193.55万人次,增长14.4%。在入境旅游者中,过夜游客813.59万人次,增长17.6%。国际旅游外汇收入90.92亿美元,增长19.8%。全年接待国内旅游人数45138.93万人次,增长20.3%;国内旅游收入6032.95亿元,增长32.0%。旅游总收入6634.58亿元,增长30.5%。\n  八、金融 \n  年末全省金融机构本外币各项存款余额45812.94亿元,比上年末增长3.9%;金融机构本外币各项贷款余额46503.45亿元,增长11.0%。\n  全年农村合作金融机构人民币各项贷款余额3865.44亿元,比上年末增长12.0%。中资金融机构人民币个人消费贷款余额16137.44亿元,比上年末增长13.4%。\n  表13  2018年全部金融机构本外币存贷款情况 \n  \n  指  标  年末数(亿元)  比上年末增长(%)  \n  各项存款余额  45812.94  3.9  \n  其中:住户存款  18532.74  10.0  \n  非金融企业存款  14050.63  -4.6  \n  其中:人民币存款  44677.70  4.4  \n  各项贷款余额  46503.45  11.0  \n  其中:短期贷款  15027.47  3.9  \n  中长期贷款  28674.55  12.1  \n  其中:人民币贷款  45173.87  11.6  \n  年末境内A股上市公司133家,比上年增加2家,总市值14122.70亿元,下降14.7%;B股上市公司数量为1家,总市值4.34亿元,下降45.6%。\n  全年内外资保险公司保费收入1081.4亿元,比上年增长4.8%,其中:财产险保费收入315.3亿元;人身险保费收入766.1亿元(寿险保费收入562.3亿元,健康险和意外伤害险保费收入203.8亿元)。支付各类赔款及给付346.3亿元,其中:财产险赔款174.1亿元;寿险业务给付112亿元;健康险和意外伤害险赔款及给付60.2亿元。\n  九、人民生活和社会保障 \n  全年全省居民人均可支配收入32644元,比上年增长8.6%;扣除价格因素,实际增长7.0%。按常住地分,农村居民人均可支配收入17821元,比上年增长9.1%,扣除价格因素,实际增长 7.5%;城镇居民人均可支配收入42121元,比上年增长8.0%,扣除价格因素,实际增长6.4%。\n  全省居民人均生活消费支出22996元,比上年增长8.2%,扣除价格因素,实际增长6.6%。按常住地分,农村居民人均生活消费支出14943元,增长6.7%,扣除价格因素,实际增长5.1%;城镇居民人均生活消费支出28145元,增长8.3%,扣除价格因素,实际增长6.7%。 \n  \n  年末参加城镇基本养老保险人数1074.26万人,比上年增加51.95万人。其中参保职工883.66万人,参保的离退休人员190.6万人。全省企业参加基本养老保险离退休人员为144.02万人,全部实现养老金按时足额发放。全省参加基本医疗保险人数3804.72万人,其中参保职工853.04万人,参保的城乡居民2951.68万人。全省参加失业保险人数570.27万人,比上年减少42.06万人。\n  年末全省领取失业保险金人数5.05万人,比上年增加0.12万人;全省纳入城市最低生活保障的居民6.08万人,减少0.73万人;纳入农村最低生活保障的居民37.81万人,减少1.27万人;城乡特困人员6.97万人。全年全省脱贫0.4万人,\"造福工程\"搬迁1.6万人。\n  年末全省养老机构床位数增至19.2万张,每千名老人拥有养老床位约33张。全省建立社区服务中心(站)3713个。全年销售社会福利彩票50.13亿元,筹集福利彩票公益金14.95亿元。\n  十、教育和科学技术 \n  全年研究生教育招生1.88万人,在校生5.31万人,毕业生1.22万人。普通高等教育招生23.86万人,在校生77.24万人,毕业生20.43万人。普通高校毕业生就业率为97%。中等职业教育(不含技工校)招生12.29万人,在校生33.58万人,毕业生10.78万人。全省普通高中招生21.08万人,在校生63.39万人,毕业生20.61万人。初中招生45.17万人,在校生128.71万人,毕业生37.14万人。普通小学招生60.84万人,在校生321.39万人,毕业生45.70万人。特殊教育招生0.40万人,在校生2.51万人,毕业生0.39万人。学前教育在园幼儿168.41万人。九年义务教育巩固率为98.6%,高中阶段毛入学率为96.8%。 \n  \n  全年研究与试验发展(R&D)经费支出预计620亿元,比上年增长14.2%,占全省生产总值的1.7%。全省已布局建设18家省级产业技术研究院和31家省级产业技术创新战略联盟。拥有国家重点实验室10个、省级重点实验室204个、国家级工程技术研究中心7个、省级工程技术研究中心527个、省级新型研发机构70家。建设国家专业化众创空间备案示范3家、国家备案众创空间52家、省级众创空间215家。科技企业孵化器备案166家,孵化面积325.8万平方米,在孵企业5003家、在孵企业员工总数8.47万人。全省入库备案科技型中小企业3344家、省高新技术企业904家。新认定高新技术企业746家,总数3800家;新增国家企业技术中心8家、国家技术创新示范企业6家,新认定省级企业技术中心50家;新认定省科技小巨人领军企业522家,总数1823家。全省专利申请166610件,专利授权102622件,分别比上年增长30.1%和50.2%。其中,发明专利申请37216件,增长40.7%,发明专利授权9858件,增长13.1%。截至2018年底,全省共拥有有效发明专利38522件,比上年增长24.2%;每万人口发明专利拥有量9.85件,比上年增加1.85件。全年共登记技术合同7753项,成交额110.9亿元。 \n  \n  年末全省共有1201家机构通过检验检测资质认定,比上年增加195家,国家产品质量监督检验中心23个,省级产品质量监督检验中心40个。全省现有独立的认证机构11个、分支机构19个,累计获得59621张产品及管理体系认证证书。全省共有法定计量技术机构69个,全年强制检定工作计量器具120万台(件)。全年制修订国家标准39项、行业标准16项、地方标准96项,累计全省共制修订国家标准1091项、行业标准1132项、地方标准1815项。\n  年末全省共有国家级地面气象观测站70个,高空气象观测站4个,天气雷达站9个,风廓线雷达站17个,大型海洋气象浮标站7个。共有地震前兆台站(点)43个,前兆测项405个,测震台站(点)120个,强震动观测站位(点)123个,GPS观测基准站61个。共有716个海洋环境监测站位、13个重点监测区域、17个重点海域的17个生物质量样品、5个海漂垃圾监测区域,共有29个海上水文气象观测浮标站位、36个沿海自动验潮站、1对中程高频地波雷达站、1套卫星遥感监测系统、1套海床基观测系统、5套船基自动站、1套海岛基站。审批通过公开出版地图185件。\n  十一、文化、卫生和体育 \n  年末全省文化系统共有国有艺术表演团体69个,公共图书馆90个,文化馆97个,博物馆98个,非国有博物馆26个。文化系统各类艺术表演团体演出1.06万场,本年度首演剧目128个,观众637.88万人次,其中:政府采购公益性演出4705场,观众255.34万人次;各级公共图书馆组织各类讲座2185次,书刊文献外借3171.45万册,总流通人数2752.15万人次;各级文化馆组织举办展览1821个,组织文艺活动3611次、培训班13989期和公益性讲座1763次,服务847.51万人次;博物馆举办313个基本陈列和695个临时展览,共有3186.76万人次参观,其中:未成年人参观940.05万人次。举办社会教育活动1605次,共有166.81万人次参加。\n  年末共有影院295个,银幕1659块,年度电影票房20.1亿元。广播电台4座,电视台5座,广播电视台68座,教育电视台1座。有线电视用户732.97万户,数字化率100%。年末广播节目综合覆盖率为99.04%;电视节目综合覆盖率为99.19%。\n  全年出版图书4274种,总印数1.08亿册;报纸46种(不含校报、副版),总印数7.97亿份;期刊176种,总印数0.24亿册;音像电子出版物74.12万盒(张)。年末全省共有各级各类档案馆120个。\n  年末全省共有各级各类医疗卫生机构2.76万个,其中医院646个,卫生院881个,村卫生室18379个。年末共有卫生技术人员24.50万人,其中执业(助理)医师9.04万人,注册护士10.88万人。年末共有医疗机构床位19.35万张,乡村医生和卫生员2.5万人。 \n  \n  全年我省运动员在世界三大赛中共获得8金6银5铜,在全国最高级别比赛中获得41金39银45铜。在第十八届亚运会上,我省12人次获得金牌、8人次获得银牌、4人次获得铜牌。为民办实事项目新建110个城市社区多功能运动场、50个社区室内健身房、60个笼式足球场和30个门球场、3个体育公园。开展全民健身运动会3700场,共有180万人次参加。全省社会体育指导员人数达到8万余名。新增省级体育产业特色基地4个、示范单位13个、示范项目12个。全年销售体育彩票121.03亿元。\n  十二、资源、环境和安全生产 \n  初步核算,全年能源消费总量13480万吨标准煤,比上年增长4.6%;万元地区生产总值能耗下降3.4%。全社会用电量增长9.5%。 \n  \n  全年植树造林总面积120.83万亩,占任务的120.8%,其中,人工荒山造林9.78万亩(含非规划林地造林2.56万亩);人工迹地更新面积65.94万亩,低产低效林改造23.54万亩。全省商品材产量573.54万立方米,比上年增长7.4%。全省毛竹产量5.95亿根,增长7.4%。全省城市(县城)新增建成区绿地面积2326公顷,建成区绿地率39.95%;全省城市(县城)新增公园绿地面积950公顷,人均公园绿地面积14.3平方米。\n  全省森林覆盖率66.80%。共有国家湿地公园8处。思明区、将乐县、武夷山市、柘荣县、永春县等5个县(市、区)获得第二批国家生态文明建设示范县(区)称号。截至2018年底,厦门、泉州获得国家生态市命名,福州通过国家生态市考核验收,漳州、三明获得省级生态市命名;65个县(市、区)获得省级以上生态县(市、区)命名,其中32个县获得国家级生态县命名;519个乡镇(街道)获得国家级生态乡镇(街道)命名。共建立自然保护区93个,其中国家级17个、省级23个,自然保护区总面积45.5万公顷。有风景名胜区54处,其中国家级风景名胜区19处、省级35处,风景名胜区总面积23.6万公顷。\n  全省12条主要河流整体水质为优,Ⅰ类-Ⅲ类水质比例为95.8%;监测的122个县级以上集中式生活饮用水源地水质达标率为100%。\n  全省9个设区市、平潭综合实验区、12个县级市和长乐区、建阳区城市空气质量达到国家《环境空气质量标准》(GB3095-2012)标准。上述24个城市中,区域声环境质量\"较好\"的城市13个;道路交通声环境质量\"好\"的城市12个,\"较好\"的城市9个。\n  市县生活垃圾无害化处理率98.87%,市县污水处理率92.4%。\n  全省地质灾害造成直接经济损失827.8万元。全省共发生森林火灾89起,其中一般火灾15起,较大火灾74起;受害面积577.4公顷;森林火灾发生率和受害率分别为1次/十万公顷和0.06‰,未发生重特大森林火灾。全年海洋灾害造成直接经济损失约11.54亿元,增长815.8%。全年发生(现)海洋赤潮5次,比上年减少2次;累计赤潮面积38平方公里,比上年减少82.2平方公里。\n  全省发生各类生产安全事故1726起、死亡939人,分别比上年下降3.1%和8.0%,其中较大以上事故12起、死亡46人,分别下降42.9%和43.2%;没有发生重特大事故。亿元地区生产总值生产安全事故死亡人数0.026人,比上年下降18.7%。\n  \n  注:1.本公报未包括金门县和连江县的马祖列岛。\n  2.本公报所列数据为初步统计数,部分合计数或相对数由于单位取舍不同而产生的计算误差,均不做机械调整。\n  3.本公报福建省地区生产总值、各产业增加值按现价计算,增长速度按可比价格计算。\n  4.本公报卫生机构数含村卫生室。\n  资料来源:\n  本公报中户籍人口、民用汽车数据来自省公安厅;就业、登记失业率、社会保障数据来自省人社厅;财政数据来自省财政厅;税收数据来自省税务局;保障性住房、城市污水处理、公园绿地面积数据来自省住建厅;重点项目投资数据来自省发改委;货物进出口数据来自福州海关;网络零售额、外商直接投资、对外直接投资、对外承包工程、对外劳务合作等数据来自省商务厅;公路里程、公路运输、水运、港口货物吞吐量数据来自省交通运输厅;铁路数据来自中国铁路南昌局集团有限公司;邮政业务数据来自省邮政管理局;互联网业务收入、电话用户、电信业务总量等数据来自省通信管理局;旅游数据、文化数据来自省文旅厅;货币金融数据来自人行福州中心支行;上市公司数据来自福建证监局;保险业数据来自福建银保监局;教育数据来自省教育厅;产业技术重大研发平台、工程技术研究中心、技术合同等数据来自省科技厅;企业技术中心数据来自省工信厅;专利数据来自省知识产权局;质量检验数据来自省市场监督管理局;气象数据来自省气象局;地震数据来自省地震局;测绘数据来自省测绘局;各类地质灾害数据来自省自然资源厅;水产品产量数据、海洋数据来自省海洋渔业局;广播、电视数据来自省广电局;报纸、期刊、图书数据来自省新闻出版局、电影数据来自省电影局、档案数据来自省档案局;卫生数据来自省卫健委;体育数据来自省体育局;低保数据来自省民政厅;扶贫、造福搬迁工程数据来自省农业农村厅;林业数据来自省林业局;环境监测数据来自省生态环境厅;水资源数据来自省水利厅;安全生产数据来自省应急管理厅;其他数据来自福建省统计局和国家统计局福建调查总队。", "source": "CCI中文互联网语料-大于16k字-30000条", "length": 14268}}
{"md5": "76aeac7c273ceba358f545fbcffa19f8", "length": 15014, "lang": "zh", "num_needles": 8, "input": "文档:\n本文章已备份在 github 上 山月的博客 欢迎 star\n刚开始，先抛出一个问题：\n你知道你们生产环境的 Node 服务平时占用内存多少吗？或者说是多少量级？\n山月在面试 Node 候选人时，这个问题足够筛掉一半的自称Node精通者，不过没有回答上来，我往往会再补充一个问题，以免漏掉优秀的无线上经验的候选人：\n如何知道某个进程消耗多少内存？\n当使用 Node 在生产环境作为服务器语言时，并发量过大或者代码问题造成 OOM (out of memory) 或者 CPU 满载这些都是服务器中常见的问题，此时通过监控 CPU 及内存，再结合日志及 Release 就很容易发现问题。\n所以，如何动态监控一个 Node 进程的内存变化呢？\n以下是一个 Node Server 的示例，并且是一个有内存泄漏问题的示例，并且是山月在生产环境定位了很久的问题的精简版。\n那次内存泄漏问题中，导致单个容器中的内存从原先的 400M 暴涨到 700M，在 800M 的容器资源限制下偶尔会发生 OOM，导致重启。一时没有定位到问题 (发现问题过迟，半个月前的时序数据已被吞没，于是未定位到 Release)，于是把资源限制上调到 1000M。后发现是由 ctx.request 挂载了数据库某个大字段而致\n一些问题需要在本地及测试环境得到及时扼杀，来避免在生产环境造成更大的影响。那么了解在本地如何监控内存就至关重要。\n这不仅试用与 node，而且适用于一切进程，包括 python，java 以及 go\n而在使用 pidstat 之前，需要先找到进程的 pid\n如何找到 Node 进程的 pid\n在 node 中可以通过 process.pid 来找到进程的 pid\n虽然通过写代码可以找到 pid，但是具有侵入性，不太实用。那如何通过非侵入的手段找到 pid 呢？# 第一种方法：通过多余的参数快速定位 pid\n从输出可以看出，当施加了压力测试后，内存由 19M 涨到了 85M。\n由于目前生产环境大都部署在 k8s，因此生产环境对于某个应用的内存监控本质上是 k8s 对于某个 workload/deployment 的内存监控，关于内存监控 metric 的数据流向大致如下:\n最终能够在 grafana 中收集到某一应用的内存监控实时图:\n这篇文章或许不能给你带来什么大的帮助，但是却可以让你了解一些你可能没接触到的知识点。\n由于有些参考资料来源于 ECMA 规范，所以感兴趣的可能需要先看《读懂 ECMAScript 规格》这篇文章，当然也可以忽略。\n粗体需要特别留意的，可能跟你想象中的不一样。\n这个最常用了，这个也很好理解。\n== 等同运算符的两边的类型不一样的时候，会有类型自动转换规则。\n相同的类型可以直接比较（相当于 === 比较），无需自动转换，不同类型有下面几种自动转换规则（x == y），规则优先级自上而下：\nnull == undefined\nundefined == null\n即使我们搞懂了 == 的规则，还是建议使用 === 这种严格的运算符来替代 ==。\n除开原始的数据类型 undefined、null、boolean、number、string、 symbol，其他的都属于对象，所以可以理解为这个 ToPrimitive 只对对象有作用。（还有个特殊的 NaN，不需要转换，NaN 可以理解为一种特殊的 number，typeof NaN === 'number'）。\n如果 x 或者 y 是对象，需要做转换处理，由于这里涉及的比较深，这里还是简单的说一下，知道有这回事就好。\n为什么不直接 a.toString() 呢，看下下面的例子你就懂了（会首先运行 valueOf，如果返回的是对象则再运行 toString，否则直接返回 valueOf 的返回值）\n那么需要从 px 和 py 的最小索引（假设是 k）对应的字符的 UTF-16 代码单元值 进行对比。\n胡慧聪记事-2006-02-27：今天参观了一个富有历史意义的地方\n\nx > y 的道理一样，这里就不多说了。\nPromise 的实现没那么简单，也没想象中的那么难，200 行代码以内就可以实现一个可替代原生的 Promise。\nPromise 已经是前端不可缺少的 API，现在已经是无处不在。你确定已经很了解 Promise 吗？如果不是很了解，那么应该了解 Promise 的实现原理。如果你觉得你自己挺了解的，那么你自己实现过 Promise 吗？\n无论如何，了解 Promise 的实现方式，对于提升我们的前端技能都有一定的帮助。\n下面的代码都是使用 ES6 语法实现的，不兼容 ES5，在最新的谷歌浏览器上运行没问题。\n如果你想先直接看效果，可以看文章最后的完整版，也可以看 github，github 上包括了单元测试。\n作为前端，一般最早接触 Promise 的概念是在 jquery 的1.5版本发布的 deferred objects。但是前端最早引入 P romise 的概念的却不是 jquery，而是dojo，而且 Promise 之所以叫 Promise 也是因为 dojo。Promises/A 标准的撰写者 KrisZyp 于 2009 年在 google 的 CommonJS 讨论组发了一个贴子，讨论了Promise API的设计思路。他声称想将这类 API 命名为 future，但是 dojo 已经实现的 deferred 机制中用到了 Promise这个术语，所以还是继续使用 Promise为此机制命名。\n当 Promise 变成接受状态（fulfillment）时，该参数作为 then 回调函数被调用。\nonRejected\n当Promise变成拒绝状态（rejection ）时，该参数作为回调函数被调用。\n最好先看看 Promises/A+规范，这里是个人总结的代码实现的基本原理。\nthen、catch 的回调方法只有在非 pending 状态才能执行。\n为了更好理解，本人总结了 Promise 的生命周期，生命周期分为两种情况，而且生命周期是不可逆的。\nexecutor、then、catch、finally 的执行都是有各自新的生命周期，即各自独立 Promise 环境。链式返回的下一个 Promise 的结果来源于上一个 Promise 的结果。\n其实每个链式调用的方法返回一个新的 Promise 实例（其实这也是 Promises/A+ 规范之一，这个也是实现 Promise 的关键之处）就可以解决这个问题，同时保证了每个链式方式的 Promise 的初始状态为 pending 状态，每个 then、catch、finally 都有自身的 Promise 生命周期。\n但是需要考虑中途断链的情况，断链后继续使用链式的话，Promise 的状态可能是非 pending 状态。\n这一点刚接触的时候，是没那么容易搞懂的。\n默认一开始就使用 new Promise(...).then(...) 进行链式调用， then、catch 等的回调函数都是处于 pending 状态，回调函数会加入异步列队等待执行。而断链的时候，可能过了几秒后才重新链式调用，那么 pending 状态就有可能变为了 fulfilled 或者 rejected 状态，需要立即执行，而不需要等待pending 状态变化后才执行。\n这个需要了解宏任务和微任务，但是，不是所有浏览器 JavaScript API 都提供微任务这一类的方法。\n所以这里先使用 setTimeout 代替，主要的目的就是要等待 pending 状态切换为其他的状态（即 executor 的执行），才会执行后续链式的回调操作。\n虽然非异步 resolve 或者 reject 的时候，使用同步方式也可以实现。这里注意一下，后面逐步说明的例子中，前面一些代码实现是没考虑异步处理的情况的，后面涉及到异步 resolve 或者 reject 的场景才加上去的。\n这里为了跟原生的 Promise 做区别，加了个前缀，改为 NPromise。\n第一个简单 Promsie 不考虑异步 resolve 的等情况，这一步只是用法像，then 的回调也不是异步执行的。\n测试例子（setTimeout 只是为了提供独立的执行环境）\n还是先不考虑异步 resolve 的等情况，这一步也只是用法像，then 的回调也不是异步执行的。\n异步 resolve 或者 reject，相对会复杂点，回调需要等待 pending 状态变为其他状态后才执行。\n原生 JavaScript 自带异步列队，我们可以利用这一点，这里先使用 setTimeout 代替，所以这个 Promise 的优先级跟 setTimeout 是同一个等级的（原生的是 Promise 优先于 setTimeout 执行）。\n新增 this._nextCallback\n由于链式返回的都是一个新的 Promise，所以下一步的回调其实只有一个，只有 Promise 的状态为 pending 的时候，this._nextCallback 才会有值（非 pending 的时候回调已经立即执行），同时等待 pending 状态改变后才会执行。\n胡慧聪记事\n6 February 2006\n\n晚上学习了一些新的音乐技巧。\n\nthis._nextCallback 都只会在当前 Promise 生命周期中执行一次。\n如果非 pending 状态，那么立即执行回调函数（如果没回调函数，跳过）。\n拓展方法相对难的应该是 Promise.all，其他的都挺简单的。\n实现 Promise 比较关键的点在于状态的切换，然后链式的处理（返回新的 Promise，核心点）。最主要的逻辑还是 then 方法的处理（核心），理解了 then 方法里面的逻辑，那么就了解了大部分了。\n经过一些测试，除了下面两点之外：\nNPromise 单独用法和效果上基本 100% 跟原生的一致。\n如果你不相信，看看 github 上的单元测试，同时你试试下面的代码：\n虽然现在使用 async 函数 就可以替代 Generator 执行器了，不过了解下 Generator 执行器的原理还是挺有必要的。\n如果你不了解 Generator，那么你需要看这里。\n例子都可以在 Console 中运行的（谷歌版本 76.0.3809.100），都是以最新浏览器支持的 JavaScript 特性来编写的，不考虑兼容性。\n有 Generator next 函数的特性，next 函数运行后会返回如下结构：\nyield 表达式本身没有返回值，或者说总是返回 undefined。\nnext 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n由于 next 方法的参数表示上一个 yield 表达式的返回值，所以在第一次使用 next 方法时，传递参数是无效的。\n代码并不复杂，最简单的执行器就出来了。如果你是一步一步的看文章过来的，都理解了原理，那么这些代码也很好理解。\n考虑 yield 的类型是 Promise\n上面的代码执行如下的 Generator 函数是不正确的：\n这样就再运行 generatorExecuter(test) 就没问题了。\n这里用到了上面提到的原理三，如果不清楚可以回去看看。\n运行上面的代码后，test 函数 console.log 输出的不是 a，而是输出下面的字符串：\nGenerator 执行器没想的那么难，花点时间就可以吃透了。\n运行例子如下，直接在谷歌 console 运行即可：\n这篇文章是针对浏览器的 JavaScript 脚本，Node.js 大同小异，这里不涉及到 Node.js 的场景。当然 Node.js 作为服务端语言，必然更关注内存泄漏的问题。\n用户一般不会在一个 Web 页面停留比较久，即使有一点内存泄漏，重载页面内存也会跟着释放。而且浏览器也有自动回收内存的机制，所以我们前端其实并没有像 C、C++ 这类语言一样，特别关注内存泄漏的问题。\n但是如果我们对内存泄漏没有什么概念，有时候还是有可能因为内存泄漏，导致页面卡顿。了解内存泄漏，如何避免内存泄漏，也是我们提升前端技能的必经之路。\n俗话说好记忆不如烂笔头，所以本人就总结了一些内存泄漏相关的知识，避免一些低级的内存泄漏问题。\n什么是内存？\n在硬件级别上，计算机内存由大量触发器组成。每个触发器包含几个晶体管，能够存储一个位。单个触发器可以通过唯一标识符寻址，因此我们可以读取和覆盖它们。因此，从概念上讲，我们可以把我们的整个计算机内存看作是一个巨大的位数组，我们可以读和写。\n这么底层的概念，了解下就好，绝大多数数情况下，JavaScript 语言作为你们高级语言，无需我们使用二进制进直接进行读和写。\n内存也是有生命周期的，不管什么程序语言，一般可以按顺序分为三个周期：\n什么是内存泄漏？\n在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n如果内存不需要时，没有经过生命周期的释放期，那么就存在内存泄漏。\n内存泄漏简单理解：无用的内存还在占用，得不到释放和归还。比较严重时，无用的内存会持续递增，从而导致整个系统卡顿，甚至崩溃。\n像 C 语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()。相反，JavaScript是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。\nJavaScript 内存管理机制和内存的生命周期是一一对应的。首先需要分配内存，然后使用内存，最后释放内存。\n其中 JavaScript 语言不需要程序员手动分配内存，绝大部分情况下也不需要手动释放内存，对 JavaScript 程序员来说通常就是使用内存（即使用变量、函数、对象等）。\nJavaScript 定义变量就会自动分配内存的。我们只需了解 JavaScript 的内存是自动分配的就足够了。\n使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。\n胡慧聪记事\nFebruary 1, 2006，晚上看了《爱尔兰人》，剧情很精彩。\n\n根据上面的内存自动分配例子，我们继续内存使用的例子：\n前端界一般称垃圾内存回收为 GC（Garbage Collection，即垃圾回收）。\n内存泄漏一般都是发生在这一步，JavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况，如果存在这些情况，需要我们手动清理内存。\n以前一些老版本的浏览器的 JavaScript 回收机制没那么完善，经常出现一些 bug 的内存泄漏，不过现在的浏览器基本都没这些问题了，已过时的知识这里就不做深究了。\n这里了解下现在的 JavaScript 的垃圾内存的两种回收方式，熟悉下这两种算法可以帮助我们理解一些内存泄漏的场景。\n这是最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\n看下下面的例子，“这个对象”的内存被回收了吗？\n当前执行环境中，“这个对象”内存还没有被回收的，需要手动释放“这个对象”的内存（当然是还没离开执行环境的情况下），例如：\n这样引用的\"这个对象\"的内存就被回收了。\nES6 把引用有区分为强引用和弱引用，这个目前只有再 Set 和 Map 中才有。\n强引用才会有引用计数叠加，只有引用计数为 0 的对象的内存才会被回收，所以一般需要手动回收内存（手动回收的前提在于标记清除法还没执行，还处于当前执行环境）。\n而弱引用没有触发引用计数叠加，只要引用计数为 0，弱引用就会自动消失，无需手动回收内存。\n当变量进入执行环境时标记为“进入环境”，当变量离开执行环境时则标记为“离开环境”，被标记为“进入环境”的变量是不能被回收的，因为它们正在被使用，而标记为“离开环境”的变量则可以被回收\n环境可以理解为我们的作用域，但是全局作用域的变量只会在页面关闭才会销毁。\nJavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况。程序员要让浏览器内存泄漏，浏览器也是管不了的。\n胡慧聪记事-February-15-2006，阅读一篇关于蜜蜂舞蹈的科学文章\n\n下面有些例子是在执行环境中，没离开当前执行环境，还没触发标记清除法。所以你需要读懂上面 JavaScript 的内存回收机制，才能更好理解下面的场景。\n不过在 eslint 帮助下，这种场景现在基本没人会犯了，eslint 会直接报错，了解下就好。\n无用的计时器忘记清理是新手最容易犯的错误之一。\n上面的组件销毁的时候，setInterval 还是在运行的，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候清除计时器，如下：\n无用的事件监听器忘记清理是新手最容易犯的错误之一。\n还是继续使用 vue 组件做例子。\n上面的组件销毁的时候，resize 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n如下是有内存泄漏的（成员是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakSet，WeakSet 的成员是弱引用，内存回收不会考虑到这个引用是否存在。\n如下是有内存泄漏的（键值是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakMap，WeakMap 的键名是弱引用，内存回收不会考虑到这个引用是否存在。\n这个跟上面的被遗忘的事件监听器的道理是一样的。\n上面的组件销毁的时候，自定义 test 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n闭包是经常使用的，闭包能给我们带来很多便利。\n上面是没有内存泄漏的，因为name 变量是要用到的（非垃圾）。这也是从侧面反映了闭包的缺点，内存占用相对高，量多了会有性能影响。\n但是改成这样就是有内存泄漏的：\n在当前执行环境未结束的情况下，严格来说，这样是有内存泄漏的，name 变量是被 closure 返回的函数调用了，但是返回的函数没被使用，这个场景下 name 就属于垃圾内存。name 不是必须的，但是还是占用了内存，也不可被回收。\n当然这种也是极端情况，很少人会犯这种低级错误。这个例子可以让我们更清楚的认识内存泄漏。\n每个页面上的 DOM 都是占用内存的，假设有一个页面 A 元素，我们获取到了 A 元素 DOM 对象，然后赋值到了一个变量（内存指向是一样的），然后移除了页面的 A 元素，如果这个变量由于其他原因没有被回收，那么就存在内存泄漏，如下面的例子：\n上面的例子 button 元素 虽然在页面上移除了，但是内存指向换为了 this.elements.button，内存占用还是存在的。所以上面的代码还需要这样写： this.elements.button = null，手动释放这个内存。\n如何发现内存泄漏？\n内存泄漏时，内存一般都是会周期性的增长，我们可以借助谷歌浏览器的开发者工具进行判别。\n这里不进行详细的开发者工具使用说明，详细看谷歌开发者工具，不过谷歌浏览器是不断迭代更新的，有些文档落后了，界面长得不一样。\n这里针对下面例子进行一步一步的排查和找到问题出现在哪里：\n上面例子的代码可以直接运行的，怎么运行我就不多说了。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Performance 选项，勾选 Memory 选项。\n在页面上点击运行按钮，然后在开发者工具上面点击左上角的录制按钮，10 秒后在页面上点击停止按钮，5 秒后停止内存录制。得到的内存走势如下：\n由上图可知，10 秒之前内存周期性增长，10 后点击了停止按钮，内存平稳，不再递增。\n我们可以使用内存走势图判断当前页面是否有内存泄漏。经过测试上面的代码 20000 个数组项改为 20 个数组项，内存走势也一样能看出来。\n上一步确认是内存泄漏问题后，我们继续利用谷歌开发者工具进行问题查找。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Memory 选项。页面上点击运行按钮，然后点击开发者工具左上角录制按钮，录制完成后继续点击录制，知道录制完三个为止。然后点击页面的停止按钮，再连续录制 3 次内存（不要清理之前的录制）。下图就是进行这些步骤后的截图：\n从这里也可以看出，点击运行按钮后，内存在不断递增。点击停止按钮后，内存就平稳了。虽然我们也可以使用这样的方式来判别是否存在内存泄漏，但是不够第一步的方法便捷，走势图也更直观。\n然后第二步的主要目的来了，记录 JavaScript 堆内存才是内存录制的主要目的，我们可以看到哪个堆占用的内存更高。\n在刚才的录制中选择 Snapshot 3 ，然后按照 Shallow Size 进行逆序排序（不了解的可以看内存术语），如下：\n从内存记录中，发现 array 对象占用最大，展开后发现，第一个 object elements 占用最大，选择这个 object elements 后可以在下面看到 newArr 变量，然后点击 test:23，只要是高亮下划线的地方都可以进去看看 （测试页面是 test.html），可以跳转到 newArr 附近。\nHttp 优化方式是前端性能优化的重要部分，也是前端必备的知识点之一。\n这个是最根本的途径，假设真的有个 10 几兆以上的静态资源文件，不减少大小的情况下，即使优化做到了极致，用户体验也好不了哪里去。\n如果整个网页就 2KB 大小的资源文件，不优化都很快。\n只打包用到的依赖包，目前 webpack tree shaking 功能已经自动处理了，还有尽量少使用第三方依赖包（当然看情况啦）。\n代码分割（code splitting），不同页面加载自己用到的代码，不加载其他页面的代码（其实也属于懒加载）。\n一般我们开启 gzip，基本都能压缩 6 倍左右（一般都是文件越大，字符串相似率越大，压缩率越大）。\n首先经过服务器压缩后，然后 Http 响应头 Content-Encoding 设置为相应的压缩方式，浏览器会自动解压的。\n当然还有其他的压缩方式，如 compress、deflate 等等，目前使用最广的还是 gzip。\n合并请求或者分散请求需要看实际情况的。\nhttp 1.1 （包括 http1.1）之前的版本，浏览器存在同域名并发限制，谷歌目前是同域名并发现在为6 个请求，其他的浏览器或多或少，但也差不了多少。\n胡慧聪记事 ：2006年02月04日 ：晚上在家学习了一些天文学知识。\n\n如果是使用的是 http1.1 web 服务，那么我们首次加载的资源要基本保证在 4 个以内，所以静态资源请求数过多就要看情况进行合并请求了。\n预加载某些情况下可以大大提升加载速度进而提示用户体验。\ndns 解析也是需要时间的，特别在移动端的时候更明显，我们可以预解析 dns 减少不通域名 dns 解析时间。\n其实还有个 preconnect，preconnect 不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议，但是浏览器有兼容性，目前用不上。\n通过 preload 一般是预加载当前页面要用到的图片、字体、js 脚本、css 文件等静态资源文件。\n如果需要，你可以完全以脚本化的方式来执行这些预加载操作。例如，我们在这里创建一个HTMLLinkElement 实例，然后将他们附加到 DOM 上：\n这意味着浏览器将预加载这个JavaScript文件，但并不实际执行它。\n如果要对其加以执行，在需要的时候，你可以执行：\n当你需要预加载一个脚本，但需要推迟到需要的时候才令其执行时，这种方式会特别有用。\n字体是要使用到的时候才会去加载字体的（如果字体是自定义的字体，会发起 Http 请求加载字体）。\n由于这个特性，我们可以预加载字体，待使用到字体的时候，字体已经加载完毕，无需等待加载。\n如下我们没有 preload 的时候，代码也是可以运行的，但是字体加载是需要等待页面 JS、CSS 资源加载完毕后，当前页面使用到字体才会去加载的：\n我们加上：\n就可以提交加载，节省大部分甚至全部的字体加载时间，一般都是全部的时间，因为 JS 资源文件比字体大多了（并行下载，最长的资源加载时间，决定了最大加载时间）。\nprefetch 一般是预加载非当前页面的资源，prefetch 是一个低优先级的资源提示，允许浏览器在后台（空闲时）获取将来可能用得到的资源，并且将他们存储在浏览器的缓存中。当前页面加载完毕，才会开始下载 d带有 prefetch 标记的资源，然后当用户进入另外一个页面，已经 prefetched 的资源可以立刻从缓存中加载。\n不过 prefech 的应用场景比较少。\n这种做法一般都是在用户滚动到响应位置（当然从用户体验式来说，需要提前一点加载），才会加载响应的图片，图片特别多的网上基本都会做这个优化（如视频网站）。\n胡慧聪记事 10 February 2006，夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。\n\n或者幻灯片查看图片的时候，用户即将查查下一张图片的时候再加载，而不是一次性加载全部的图片。\n带有 defer 或 async 属性的 script 资源都会并行下载，而且不会影响页面的解析，从而达到了节省脚本下载时间。\n两种的不同的在于：\n带有 defer 属性的资源会按照顺序在页面出现的属性，资源加载完后，会在 DOMContentLoaded事件调用之前依次执行。\n带有 async 属性的资源则是下载完立即执行，可能在 DOMContentLoaded 事件之前或者之后执行，多个带有 async 属性的资源无执行顺序，谁先加载完成，谁先执行。\n那么为什么可以节省下载时间？我们来对比一下。\n缓存对于再次访问相同资源来说，是个极大的优化，缓存是 http 优化的必经之道。对于 css 和 js 这些静态资源文件，我们一般都是用强缓存（例如缓存30天），强缓存无需再次向服务请求静态资源。\n但是强缓存如果使用不当，那么会对用户造成意想不到的 bug，如入口 html 文件就不能被强缓存了，否则版本更新后，用户在缓存期间是无法访问到新版的页面。\n详细可以看下本人的另一篇缓存相关的文章，浏览器之HTTP缓存的那些事。\nHttp2.0 多路复用解决了多域名并发现在问题，可以节省资源总体的下载时间，还有请求头压缩和差异传输也会提高传输效率。\nHTTP1.1 持久连接解决了连接复用问题，但还是存在着一个问题，一个 TCP 无法并发处理请求：在一个 TCP 连接中，同一时间只能够发送一个请求，并且需要等响应完成才能够发送第二个请求。\nHTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP1.1 大了好几个数量级。\n当然 HTTP1.1 也可以多建立几个 TCP 连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。\nTCP 连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。\n多路复用能带来哪些优化呢？\n有多路复用特性，那么浏览器对同一域名的链接数的限制也是没必要的了（HTTP1.1 的谷歌对统一域名并发请求最多支持 6个 持久链接）。\n那么我们可以根据实际情况进行资源拆分，从而节省下载时间，无并发请求限制的情况下，下载的时间是根据并行下载的最长时间来算的，无需等待上一个资源下载，才能进行另外一个资源的下载，在资源比较多的情况下，这将大大提升资源总体的下载速度。\n以前的 CSS 的雪碧图 优化手段，在多路复用的特性下，已经是没必要的了。\n多路复用还带来了，延迟低的优化，这也是速度提升的一方面。\n在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破 HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。\n在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧并对它们采用二进制格式的编码，其中HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。\nHTTP2.0 使用 HPACK 算法对首部字段的数据进行压缩，这样数据体积小了，在网络上传输就会更快。\nHTTP2.0 规定了在客户端和服务器端会使用并且维护首部表来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次。\n事实上，如果请求中不包含首部字段（例如对同一资源的轮询请求），此时服务器自动使用之前请求发送的首部字段，那么首部字段开销就是零字节。\n如果首部发生变化了，那么只需要发送变化了数据在 Headers 帧里面，新增或修改的首部帧会被追加到首部表。首部表在 HTTP2.0 的连接存在期内始终存在，由客户端和服务器共同渐进地更新。\n胡慧聪记事-2006年02月07日，今天在花店买了一束鲜花\n\n严格意义上，CDN 不算 Http 优化，前端也无法直接处理这个事情，这是运维的事。CDN 节点可以解决跨运营商和跨地域访问的问题，提升访问速度。\nCDN的全称是 Content Delivery Network，即内容分发网络。\n胡慧聪记事-2006年02月12日，探访了杭州的西湖博物馆\nCDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。CDN 最大的优势在于提升用户资源访问速度，因此静态资源走 CDN 是一个很好的优化点。\n分布式服务器，用户就近访问，CDN 节点可以解决跨运营商和跨地域访问的问题，同时分散源服务器访问压力。\n还有一个而外的优点：\n无 cookie 传输（其实这个不完全算是优势）。静态资源一般无需 cookie，静态资源放在不同域名可以减少一定程度的带宽和提升一定的访问速度，虽然单个请求不明显，但是量多了是会有质的区别的。\nCDN 是如何分散源服务器的压力的？\nCDN 的核心点有两个: 一个是缓存，一个是回源。\n通过缓存和回源策略，达到分散源服务器的压力。首先将从根服务器请求来的资源按要求缓存。然后当有用户访问某个资源的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。\n首先需要一个第三方认证机构（CA认证），确保公钥的合法性（即证书，不合法的证书浏览器会警告），然后利用非对称加密（公钥私钥）方式加密并传输共享密钥到服务器，可以确保共享密钥无法被拦截被获取到（共享密钥被公钥加密了，只有对应的私钥才能解密，服务器有私钥），最终的客户端和服务端 HTTP 传输就是使用共享秘钥加密进行通信。\n通过公钥私钥的方式，避免了共享密钥发送途中被第三方拦截获取密钥的安全问题。\n通过公钥和私钥加密建立保护层（即 SSL 保护层），后续的 Http 请求就会使用共享密钥进行加密通信（共享的密钥已经被 SSL 保护起来了，外面无法拦截到），即所谓的安全层。\n所以建立了安全层后，即使 HTTP 报文被拦截到，也无法解密。\n由于公钥这个环节是公开的，存在被替换的风险，所以就有了第三方证书认证公司（CA认证），浏览器通过判断证书是否有效，发现网站是否值得信任。\n一般系统或者浏览器都会内置信任的根证书（这些 CA 组织都是非常可信的），浏览器可以根据这个根证书判断网站的证书是否合法。\n证书如果不合法，那么浏览器就会警告，不给用户访问证书不合法的网站，除非用户跳过这个警告。\n首先我们需要了解两者的定义和实现的方式，才能更好的区分两者的不同点。\n或许以前认为订阅发布模式是观察者模式的一种别称，但是发展至今，概念已经有了不少区别。\n在软件架构中，发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。\n或许你用过 eventemitter、node 的 events、Backbone 的 events 等等，这些都是前端早期，比较流行的数据流通信方式，即订阅发布模式。\n从字面意思来看，我们需要首先订阅，发布者发布消息后才会收到发布的消息。不过我们还需要一个中间者来协调，从事件角度来说，这个中间者就是事件中心，协调发布者和订阅者直接的消息通信。\nEvent 可以理解为事件中心，提供了订阅和发布功能。\n订阅者在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；发布者在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。\n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。\n观察者模式我们可能比较熟悉的场景就是响应式数据，如 Vue 的响应式、Mbox 的响应式。\ncontent=\"width=device-widthinitial-scale=1maximum-scale=1viewport-fit=cover\"\n角色角度来看，订阅发布模式需要三种角色，发布者、事件中心和订阅者。二观察者模式需要两种角色，目标和观察者，无事件中心负责通信。\n从耦合度上来看，订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是解耦的。而观察者模式中目标和观察者是直接关联的，耦合在一起（有些观念说观察者是解耦，解耦的是业务代码，不是目标和观察者本身）。\n由于订阅发布模式的发布者和订阅者是解耦的，只要引入订阅发布模式的事件中心，无论在何处都可以发布订阅。同时订阅发布者相互之间不影响。\n订阅发布模式在使用不当的情况下，容易造成数据流混乱，所以才有了 React 提出的单项数据流思想，就是为了解决数据流混乱的问题。\n灵活是有点，同时也是缺点，使用不当就会造成数据流混乱，导致代码不好维护。\n订阅发布模式需要维护事件列队，订阅的事件越多，内存消耗越大。\n目标变化就会通知观察者，这是观察者最大的有点，也是因为这个优点，观察者模式在前端才会这么出名。\n相比订阅发布模式，由于目标和观察者是耦合在一起的，所以观察者模式需要同时引入目标和观察者才能达到响应式的效果。而订阅发布模式只需要引入事件中心，订阅者和发布者可以不再一处。\n设计模式是前人解决某个特定场景下对而总结出来的一些解决方案。可能刚开始接触编程还没有什么经验的时候，会感觉设计模式没那么好理解，这个也很正常。有些简单的设计模式我们有时候用到，不过没意识到也是存在的。\n学习设计模式，可以让我们在处理问题的时候提供更多更快的解决思路。\n当然设计模式的应用也不是一时半会就会上手，很多情况下我们编写的业务逻辑都没用到设计模式或者本来就不需要特定的设计模式。\n这个使我们常使用的设计模式，也算最简单的设计模式之一，好处在于可以保持原有接口的数据结构不变动。\n适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。\n适配器模式很好理解，假设我们和后端定义了一个接口数据结构为（可以理解为旧接口）：\n但是后端后面因为其他原因，需要定义返回的结构为（可以理解为新接口）：\n然后我们前端的使用到后端接口有好几处，那么我可以把新的接口字段结构适配为老接口的，就不需要各处去修改字段，只要把源头的数据适配好就可以了。\n当然上面的是非常简单的场景，也是经常用到的场景。或许你会认为后端处理不更好了，的确是这样更好，但是这个不是我们讨论的范围。\n单例模式，从字面意思也很好理解，就是实例化多次都只会有一个实例。\n有些场景实例化一次，可以达到缓存效果，可以减少内存占用。还有些场景就是必须只能实例化一次，否则实例化多次会覆盖之前的实例，导致出现 bug（这种场景比较少见）。\n实现弹框的一种做法是先创建好弹框 然后使之隐藏 这样子的话会浪费部分不必要的 DOM 开销 我们可以在需要弹框的时候再进行创建 同时结合单例模式实现只有一个实例 从而节省部分 DOM 开销。下列为登入框部分代码:\n代理模式的定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。\n代理对象拥有本体对象的一切功能的同时，可以拥有而外的功能。而且代理对象和本体对象具有一致的接口，对使用者友好。\n下面这段代码运用代理模式来实现图片预加载可以看到通过代理模式巧妙地将创建图片与预加载逻辑分离，并且在未来如果不需要预加载，只要改成请求本体代替请求代理对象就行。\n在原有的功能上加上结果缓存功能，就属于缓存代理。\n原先有个功能是实现字符串反转（reverseString），那么在不改变 reverseString 的现有逻辑，我们可以使用缓存代理模式实现性能的优化，当然也可以在值改变的时候去处理下其他逻辑，如 Vue computed 的用法。\n装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\nES6/7 的decorator 语法提案，就是装饰者模式。\n在策略模式（Strategy Pattern）中，一个行为或其算法可以在运行时更改。\n假设我们的绩效分为 A、B、C、D 这四个等级，四个等级的奖励是不一样的，一般我们的代码是这样实现：\n这里每个函数就是一个策略，修改一个其中一个策略，并不会影响其他的策略，都可以单独使用。当然这只是个简单的范例，只为了说明。\n顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n上面的代码，对 order 相关的进行了解耦，order500，order200、orderCommon 等都是可以单独调用的。\n看下 2016-12-02，尤雨溪大神对此框架的评价（当然已经过时了，但是核心的思想还是一致的）:\n这个框架的 API 设计是从 Ractive 那边传承过来的（自然跟 Vue 也非常像），但这不是重点。Svelte 的核心思想在于‘通过静态编译减少框架运行时的代码量’。举例来说，当前的框架无论是 React Angular 还是 Vue，不管你怎么编译，使用的时候必然需要‘引入’框架本身，也就是所谓的运行时 (runtime)。但是用 Svelte 就不一样，一个 Svelte 组件编译了以后，所有需要的运行时代码都包含在里面了，除了引入这个组件本身，你不需要再额外引入一个所谓的框架运行时！\nSvelte 跟 vue 和 react一样，是一个数据驱动组件框架。但是也有很大的不同，它是一个运行时框架，无需引入框架本身，同时也没用到虚拟 DOM（运行时框架特性决定了这个框架跟虚拟 DOM 无缘）。\n虽然没使用到虚拟 DOM，但一样可以达到出色的性能，而且对开发者编写代码是十分便捷。\n那么我们先看下 svelte 的因为意思：苗条的。苗条的框架正是作者的初始目的，苗条包括代码编写量、打包大小等等。\n总结一下这个框架的优势，即作者开发新框架的目的。\n即 tree shaking，这个概念本来也是作者首先提出来的，webpack 是参考了 rollup。\n既有响应式数据的优点，v3 版本也解决了 vue 数据绑定缺点，用起来十分方便。\n都不用多说，一眼就看出来，svelte 简单多了。\n为什么不使用虚拟 DOM？\n所以如果你有这个想法，那么你肯定疑惑 svelte 没用到虚拟 DOM，它的速度为什么会快？\n其实虚拟 DOM 并不是什么时候都快，看下粗糙的对比例子。\n这里并没有直接统计渲染的时间，通过很多条数据我们就可以感受出来他们直接的性能。特别是点击每条数据的时候，明显感觉出来（由于是在线上的例子，所以首次渲染速度不准确，主要看点击的响应速度）。\n当然这仅仅是在 50000 条数据下的测试，对比一下框架所谓的速度，实际的情况下我们是不会一次性展示这么多数据的。所以在性能还可行的情况下，更多的选择是框架所带来的的便利，包括上手难度、维护难度、社区大小等等条件。\n首先虚拟 DOM 不是一个功能，它只是实现数据驱动的开发的手段，没有虚拟 DOM 我们也可以实现数据驱动的开发方式，svelte 正是做了这个事情。\n单纯从上面的对比例子来看，svelte 的速度比虚拟 DOM 更快（不同框架虚拟 DOM 实现会有差别）。虽然没有进行更深层次的对比，但是如果认为虚拟 DOM 速度快的观点是不完全对的，应该说虚拟 DOM 可以构建大部分速度还可以的 Web 应用。\n编写代码是那么的自然，如下面就是一个组件。\n这个就牛逼了，更加的自然，这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\n自动订阅的 svelte store\n这个其实就是订阅发布模式，不过 svelte 提供了自身特有的便捷的绑定方式（自动订阅），用起来是那么的自然，那么的爽。\n这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\nstores.js\n可以直接在 react、vue、angular 等框架中使用。\nsvelte 是一个刚起步不久的前端框架，无论在维护人员还是社区上都是大大不如三大框架，这里列举一下本人认为的 svelte 存在的缺点。\n当然这也是这个框架故意这样设计的，这样 props 也是可以响应式的。\n需要利用 props 的双向绑定特性，这就可能导致深层次组件的需要层层传递 DOM 对象（是子父传递，不是父子传递）。\n\njs 文件是不支持 sevelte 静态模板特性的，像下面这样是会报错的。\n找了一下，没找到可以支持 ts 的解决方案，如果有解决方案可以评论下。\n\n回答以下问题：\n按日期罗列胡慧聪记事的内容", "output": "按日期罗列胡慧聪记事的内容如下：\n- 2006年02月01日：晚上看了《爱尔兰人》，剧情很精彩。\n- 2006年02月04日：晚上在家学习了一些天文学知识。\n- 2006年02月06日：晚上学习了一些新的音乐技巧。\n- 2006年02月07日：今天在花店买了一束鲜花\n- 2006年02月10日：夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。\n- 2006年02月12日：探访了杭州的西湖博物馆\n- 2006年02月15日：阅读一篇关于蜜蜂舞蹈的科学文章\n- 2006年02月27日：今天参观了一个富有历史意义的地方", "text_with_needles": "本文章已备份在 github 上 山月的博客 欢迎 star\n刚开始，先抛出一个问题：\n你知道你们生产环境的 Node 服务平时占用内存多少吗？或者说是多少量级？\n山月在面试 Node 候选人时，这个问题足够筛掉一半的自称Node精通者，不过没有回答上来，我往往会再补充一个问题，以免漏掉优秀的无线上经验的候选人：\n如何知道某个进程消耗多少内存？\n当使用 Node 在生产环境作为服务器语言时，并发量过大或者代码问题造成 OOM (out of memory) 或者 CPU 满载这些都是服务器中常见的问题，此时通过监控 CPU 及内存，再结合日志及 Release 就很容易发现问题。\n所以，如何动态监控一个 Node 进程的内存变化呢？\n以下是一个 Node Server 的示例，并且是一个有内存泄漏问题的示例，并且是山月在生产环境定位了很久的问题的精简版。\n那次内存泄漏问题中，导致单个容器中的内存从原先的 400M 暴涨到 700M，在 800M 的容器资源限制下偶尔会发生 OOM，导致重启。一时没有定位到问题 (发现问题过迟，半个月前的时序数据已被吞没，于是未定位到 Release)，于是把资源限制上调到 1000M。后发现是由 ctx.request 挂载了数据库某个大字段而致\n一些问题需要在本地及测试环境得到及时扼杀，来避免在生产环境造成更大的影响。那么了解在本地如何监控内存就至关重要。\n这不仅试用与 node，而且适用于一切进程，包括 python，java 以及 go\n而在使用 pidstat 之前，需要先找到进程的 pid\n如何找到 Node 进程的 pid\n在 node 中可以通过 process.pid 来找到进程的 pid\n虽然通过写代码可以找到 pid，但是具有侵入性，不太实用。那如何通过非侵入的手段找到 pid 呢？# 第一种方法：通过多余的参数快速定位 pid\n从输出可以看出，当施加了压力测试后，内存由 19M 涨到了 85M。\n由于目前生产环境大都部署在 k8s，因此生产环境对于某个应用的内存监控本质上是 k8s 对于某个 workload/deployment 的内存监控，关于内存监控 metric 的数据流向大致如下:\n最终能够在 grafana 中收集到某一应用的内存监控实时图:\n这篇文章或许不能给你带来什么大的帮助，但是却可以让你了解一些你可能没接触到的知识点。\n由于有些参考资料来源于 ECMA 规范，所以感兴趣的可能需要先看《读懂 ECMAScript 规格》这篇文章，当然也可以忽略。\n粗体需要特别留意的，可能跟你想象中的不一样。\n这个最常用了，这个也很好理解。\n== 等同运算符的两边的类型不一样的时候，会有类型自动转换规则。\n相同的类型可以直接比较（相当于 === 比较），无需自动转换，不同类型有下面几种自动转换规则（x == y），规则优先级自上而下：\nnull == undefined\nundefined == null\n即使我们搞懂了 == 的规则，还是建议使用 === 这种严格的运算符来替代 ==。\n除开原始的数据类型 undefined、null、boolean、number、string、 symbol，其他的都属于对象，所以可以理解为这个 ToPrimitive 只对对象有作用。（还有个特殊的 NaN，不需要转换，NaN 可以理解为一种特殊的 number，typeof NaN === 'number'）。\n如果 x 或者 y 是对象，需要做转换处理，由于这里涉及的比较深，这里还是简单的说一下，知道有这回事就好。\n为什么不直接 a.toString() 呢，看下下面的例子你就懂了（会首先运行 valueOf，如果返回的是对象则再运行 toString，否则直接返回 valueOf 的返回值）\n那么需要从 px 和 py 的最小索引（假设是 k）对应的字符的 UTF-16 代码单元值 进行对比。\n胡慧聪记事-2006-02-27：今天参观了一个富有历史意义的地方\n\nx > y 的道理一样，这里就不多说了。\nPromise 的实现没那么简单，也没想象中的那么难，200 行代码以内就可以实现一个可替代原生的 Promise。\nPromise 已经是前端不可缺少的 API，现在已经是无处不在。你确定已经很了解 Promise 吗？如果不是很了解，那么应该了解 Promise 的实现原理。如果你觉得你自己挺了解的，那么你自己实现过 Promise 吗？\n无论如何，了解 Promise 的实现方式，对于提升我们的前端技能都有一定的帮助。\n下面的代码都是使用 ES6 语法实现的，不兼容 ES5，在最新的谷歌浏览器上运行没问题。\n如果你想先直接看效果，可以看文章最后的完整版，也可以看 github，github 上包括了单元测试。\n作为前端，一般最早接触 Promise 的概念是在 jquery 的1.5版本发布的 deferred objects。但是前端最早引入 P romise 的概念的却不是 jquery，而是dojo，而且 Promise 之所以叫 Promise 也是因为 dojo。Promises/A 标准的撰写者 KrisZyp 于 2009 年在 google 的 CommonJS 讨论组发了一个贴子，讨论了Promise API的设计思路。他声称想将这类 API 命名为 future，但是 dojo 已经实现的 deferred 机制中用到了 Promise这个术语，所以还是继续使用 Promise为此机制命名。\n当 Promise 变成接受状态（fulfillment）时，该参数作为 then 回调函数被调用。\nonRejected\n当Promise变成拒绝状态（rejection ）时，该参数作为回调函数被调用。\n最好先看看 Promises/A+规范，这里是个人总结的代码实现的基本原理。\nthen、catch 的回调方法只有在非 pending 状态才能执行。\n为了更好理解，本人总结了 Promise 的生命周期，生命周期分为两种情况，而且生命周期是不可逆的。\nexecutor、then、catch、finally 的执行都是有各自新的生命周期，即各自独立 Promise 环境。链式返回的下一个 Promise 的结果来源于上一个 Promise 的结果。\n其实每个链式调用的方法返回一个新的 Promise 实例（其实这也是 Promises/A+ 规范之一，这个也是实现 Promise 的关键之处）就可以解决这个问题，同时保证了每个链式方式的 Promise 的初始状态为 pending 状态，每个 then、catch、finally 都有自身的 Promise 生命周期。\n但是需要考虑中途断链的情况，断链后继续使用链式的话，Promise 的状态可能是非 pending 状态。\n这一点刚接触的时候，是没那么容易搞懂的。\n默认一开始就使用 new Promise(...).then(...) 进行链式调用， then、catch 等的回调函数都是处于 pending 状态，回调函数会加入异步列队等待执行。而断链的时候，可能过了几秒后才重新链式调用，那么 pending 状态就有可能变为了 fulfilled 或者 rejected 状态，需要立即执行，而不需要等待pending 状态变化后才执行。\n这个需要了解宏任务和微任务，但是，不是所有浏览器 JavaScript API 都提供微任务这一类的方法。\n所以这里先使用 setTimeout 代替，主要的目的就是要等待 pending 状态切换为其他的状态（即 executor 的执行），才会执行后续链式的回调操作。\n虽然非异步 resolve 或者 reject 的时候，使用同步方式也可以实现。这里注意一下，后面逐步说明的例子中，前面一些代码实现是没考虑异步处理的情况的，后面涉及到异步 resolve 或者 reject 的场景才加上去的。\n这里为了跟原生的 Promise 做区别，加了个前缀，改为 NPromise。\n第一个简单 Promsie 不考虑异步 resolve 的等情况，这一步只是用法像，then 的回调也不是异步执行的。\n测试例子（setTimeout 只是为了提供独立的执行环境）\n还是先不考虑异步 resolve 的等情况，这一步也只是用法像，then 的回调也不是异步执行的。\n异步 resolve 或者 reject，相对会复杂点，回调需要等待 pending 状态变为其他状态后才执行。\n原生 JavaScript 自带异步列队，我们可以利用这一点，这里先使用 setTimeout 代替，所以这个 Promise 的优先级跟 setTimeout 是同一个等级的（原生的是 Promise 优先于 setTimeout 执行）。\n新增 this._nextCallback\n由于链式返回的都是一个新的 Promise，所以下一步的回调其实只有一个，只有 Promise 的状态为 pending 的时候，this._nextCallback 才会有值（非 pending 的时候回调已经立即执行），同时等待 pending 状态改变后才会执行。\n胡慧聪记事\n6 February 2006\n\n晚上学习了一些新的音乐技巧。\n\nthis._nextCallback 都只会在当前 Promise 生命周期中执行一次。\n如果非 pending 状态，那么立即执行回调函数（如果没回调函数，跳过）。\n拓展方法相对难的应该是 Promise.all，其他的都挺简单的。\n实现 Promise 比较关键的点在于状态的切换，然后链式的处理（返回新的 Promise，核心点）。最主要的逻辑还是 then 方法的处理（核心），理解了 then 方法里面的逻辑，那么就了解了大部分了。\n经过一些测试，除了下面两点之外：\nNPromise 单独用法和效果上基本 100% 跟原生的一致。\n如果你不相信，看看 github 上的单元测试，同时你试试下面的代码：\n虽然现在使用 async 函数 就可以替代 Generator 执行器了，不过了解下 Generator 执行器的原理还是挺有必要的。\n如果你不了解 Generator，那么你需要看这里。\n例子都可以在 Console 中运行的（谷歌版本 76.0.3809.100），都是以最新浏览器支持的 JavaScript 特性来编写的，不考虑兼容性。\n有 Generator next 函数的特性，next 函数运行后会返回如下结构：\nyield 表达式本身没有返回值，或者说总是返回 undefined。\nnext 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n由于 next 方法的参数表示上一个 yield 表达式的返回值，所以在第一次使用 next 方法时，传递参数是无效的。\n代码并不复杂，最简单的执行器就出来了。如果你是一步一步的看文章过来的，都理解了原理，那么这些代码也很好理解。\n考虑 yield 的类型是 Promise\n上面的代码执行如下的 Generator 函数是不正确的：\n这样就再运行 generatorExecuter(test) 就没问题了。\n这里用到了上面提到的原理三，如果不清楚可以回去看看。\n运行上面的代码后，test 函数 console.log 输出的不是 a，而是输出下面的字符串：\nGenerator 执行器没想的那么难，花点时间就可以吃透了。\n运行例子如下，直接在谷歌 console 运行即可：\n这篇文章是针对浏览器的 JavaScript 脚本，Node.js 大同小异，这里不涉及到 Node.js 的场景。当然 Node.js 作为服务端语言，必然更关注内存泄漏的问题。\n用户一般不会在一个 Web 页面停留比较久，即使有一点内存泄漏，重载页面内存也会跟着释放。而且浏览器也有自动回收内存的机制，所以我们前端其实并没有像 C、C++ 这类语言一样，特别关注内存泄漏的问题。\n但是如果我们对内存泄漏没有什么概念，有时候还是有可能因为内存泄漏，导致页面卡顿。了解内存泄漏，如何避免内存泄漏，也是我们提升前端技能的必经之路。\n俗话说好记忆不如烂笔头，所以本人就总结了一些内存泄漏相关的知识，避免一些低级的内存泄漏问题。\n什么是内存？\n在硬件级别上，计算机内存由大量触发器组成。每个触发器包含几个晶体管，能够存储一个位。单个触发器可以通过唯一标识符寻址，因此我们可以读取和覆盖它们。因此，从概念上讲，我们可以把我们的整个计算机内存看作是一个巨大的位数组，我们可以读和写。\n这么底层的概念，了解下就好，绝大多数数情况下，JavaScript 语言作为你们高级语言，无需我们使用二进制进直接进行读和写。\n内存也是有生命周期的，不管什么程序语言，一般可以按顺序分为三个周期：\n什么是内存泄漏？\n在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n如果内存不需要时，没有经过生命周期的释放期，那么就存在内存泄漏。\n内存泄漏简单理解：无用的内存还在占用，得不到释放和归还。比较严重时，无用的内存会持续递增，从而导致整个系统卡顿，甚至崩溃。\n像 C 语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()。相反，JavaScript是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。\nJavaScript 内存管理机制和内存的生命周期是一一对应的。首先需要分配内存，然后使用内存，最后释放内存。\n其中 JavaScript 语言不需要程序员手动分配内存，绝大部分情况下也不需要手动释放内存，对 JavaScript 程序员来说通常就是使用内存（即使用变量、函数、对象等）。\nJavaScript 定义变量就会自动分配内存的。我们只需了解 JavaScript 的内存是自动分配的就足够了。\n使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。\n胡慧聪记事\nFebruary 1, 2006，晚上看了《爱尔兰人》，剧情很精彩。\n\n根据上面的内存自动分配例子，我们继续内存使用的例子：\n前端界一般称垃圾内存回收为 GC（Garbage Collection，即垃圾回收）。\n内存泄漏一般都是发生在这一步，JavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况，如果存在这些情况，需要我们手动清理内存。\n以前一些老版本的浏览器的 JavaScript 回收机制没那么完善，经常出现一些 bug 的内存泄漏，不过现在的浏览器基本都没这些问题了，已过时的知识这里就不做深究了。\n这里了解下现在的 JavaScript 的垃圾内存的两种回收方式，熟悉下这两种算法可以帮助我们理解一些内存泄漏的场景。\n这是最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\n看下下面的例子，“这个对象”的内存被回收了吗？\n当前执行环境中，“这个对象”内存还没有被回收的，需要手动释放“这个对象”的内存（当然是还没离开执行环境的情况下），例如：\n这样引用的\"这个对象\"的内存就被回收了。\nES6 把引用有区分为强引用和弱引用，这个目前只有再 Set 和 Map 中才有。\n强引用才会有引用计数叠加，只有引用计数为 0 的对象的内存才会被回收，所以一般需要手动回收内存（手动回收的前提在于标记清除法还没执行，还处于当前执行环境）。\n而弱引用没有触发引用计数叠加，只要引用计数为 0，弱引用就会自动消失，无需手动回收内存。\n当变量进入执行环境时标记为“进入环境”，当变量离开执行环境时则标记为“离开环境”，被标记为“进入环境”的变量是不能被回收的，因为它们正在被使用，而标记为“离开环境”的变量则可以被回收\n环境可以理解为我们的作用域，但是全局作用域的变量只会在页面关闭才会销毁。\nJavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况。程序员要让浏览器内存泄漏，浏览器也是管不了的。\n胡慧聪记事-February-15-2006，阅读一篇关于蜜蜂舞蹈的科学文章\n\n下面有些例子是在执行环境中，没离开当前执行环境，还没触发标记清除法。所以你需要读懂上面 JavaScript 的内存回收机制，才能更好理解下面的场景。\n不过在 eslint 帮助下，这种场景现在基本没人会犯了，eslint 会直接报错，了解下就好。\n无用的计时器忘记清理是新手最容易犯的错误之一。\n上面的组件销毁的时候，setInterval 还是在运行的，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候清除计时器，如下：\n无用的事件监听器忘记清理是新手最容易犯的错误之一。\n还是继续使用 vue 组件做例子。\n上面的组件销毁的时候，resize 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n如下是有内存泄漏的（成员是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakSet，WeakSet 的成员是弱引用，内存回收不会考虑到这个引用是否存在。\n如下是有内存泄漏的（键值是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakMap，WeakMap 的键名是弱引用，内存回收不会考虑到这个引用是否存在。\n这个跟上面的被遗忘的事件监听器的道理是一样的。\n上面的组件销毁的时候，自定义 test 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n闭包是经常使用的，闭包能给我们带来很多便利。\n上面是没有内存泄漏的，因为name 变量是要用到的（非垃圾）。这也是从侧面反映了闭包的缺点，内存占用相对高，量多了会有性能影响。\n但是改成这样就是有内存泄漏的：\n在当前执行环境未结束的情况下，严格来说，这样是有内存泄漏的，name 变量是被 closure 返回的函数调用了，但是返回的函数没被使用，这个场景下 name 就属于垃圾内存。name 不是必须的，但是还是占用了内存，也不可被回收。\n当然这种也是极端情况，很少人会犯这种低级错误。这个例子可以让我们更清楚的认识内存泄漏。\n每个页面上的 DOM 都是占用内存的，假设有一个页面 A 元素，我们获取到了 A 元素 DOM 对象，然后赋值到了一个变量（内存指向是一样的），然后移除了页面的 A 元素，如果这个变量由于其他原因没有被回收，那么就存在内存泄漏，如下面的例子：\n上面的例子 button 元素 虽然在页面上移除了，但是内存指向换为了 this.elements.button，内存占用还是存在的。所以上面的代码还需要这样写： this.elements.button = null，手动释放这个内存。\n如何发现内存泄漏？\n内存泄漏时，内存一般都是会周期性的增长，我们可以借助谷歌浏览器的开发者工具进行判别。\n这里不进行详细的开发者工具使用说明，详细看谷歌开发者工具，不过谷歌浏览器是不断迭代更新的，有些文档落后了，界面长得不一样。\n这里针对下面例子进行一步一步的排查和找到问题出现在哪里：\n上面例子的代码可以直接运行的，怎么运行我就不多说了。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Performance 选项，勾选 Memory 选项。\n在页面上点击运行按钮，然后在开发者工具上面点击左上角的录制按钮，10 秒后在页面上点击停止按钮，5 秒后停止内存录制。得到的内存走势如下：\n由上图可知，10 秒之前内存周期性增长，10 后点击了停止按钮，内存平稳，不再递增。\n我们可以使用内存走势图判断当前页面是否有内存泄漏。经过测试上面的代码 20000 个数组项改为 20 个数组项，内存走势也一样能看出来。\n上一步确认是内存泄漏问题后，我们继续利用谷歌开发者工具进行问题查找。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Memory 选项。页面上点击运行按钮，然后点击开发者工具左上角录制按钮，录制完成后继续点击录制，知道录制完三个为止。然后点击页面的停止按钮，再连续录制 3 次内存（不要清理之前的录制）。下图就是进行这些步骤后的截图：\n从这里也可以看出，点击运行按钮后，内存在不断递增。点击停止按钮后，内存就平稳了。虽然我们也可以使用这样的方式来判别是否存在内存泄漏，但是不够第一步的方法便捷，走势图也更直观。\n然后第二步的主要目的来了，记录 JavaScript 堆内存才是内存录制的主要目的，我们可以看到哪个堆占用的内存更高。\n在刚才的录制中选择 Snapshot 3 ，然后按照 Shallow Size 进行逆序排序（不了解的可以看内存术语），如下：\n从内存记录中，发现 array 对象占用最大，展开后发现，第一个 object elements 占用最大，选择这个 object elements 后可以在下面看到 newArr 变量，然后点击 test:23，只要是高亮下划线的地方都可以进去看看 （测试页面是 test.html），可以跳转到 newArr 附近。\nHttp 优化方式是前端性能优化的重要部分，也是前端必备的知识点之一。\n这个是最根本的途径，假设真的有个 10 几兆以上的静态资源文件，不减少大小的情况下，即使优化做到了极致，用户体验也好不了哪里去。\n如果整个网页就 2KB 大小的资源文件，不优化都很快。\n只打包用到的依赖包，目前 webpack tree shaking 功能已经自动处理了，还有尽量少使用第三方依赖包（当然看情况啦）。\n代码分割（code splitting），不同页面加载自己用到的代码，不加载其他页面的代码（其实也属于懒加载）。\n一般我们开启 gzip，基本都能压缩 6 倍左右（一般都是文件越大，字符串相似率越大，压缩率越大）。\n首先经过服务器压缩后，然后 Http 响应头 Content-Encoding 设置为相应的压缩方式，浏览器会自动解压的。\n当然还有其他的压缩方式，如 compress、deflate 等等，目前使用最广的还是 gzip。\n合并请求或者分散请求需要看实际情况的。\nhttp 1.1 （包括 http1.1）之前的版本，浏览器存在同域名并发限制，谷歌目前是同域名并发现在为6 个请求，其他的浏览器或多或少，但也差不了多少。\n胡慧聪记事 ：2006年02月04日 ：晚上在家学习了一些天文学知识。\n\n如果是使用的是 http1.1 web 服务，那么我们首次加载的资源要基本保证在 4 个以内，所以静态资源请求数过多就要看情况进行合并请求了。\n预加载某些情况下可以大大提升加载速度进而提示用户体验。\ndns 解析也是需要时间的，特别在移动端的时候更明显，我们可以预解析 dns 减少不通域名 dns 解析时间。\n其实还有个 preconnect，preconnect 不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议，但是浏览器有兼容性，目前用不上。\n通过 preload 一般是预加载当前页面要用到的图片、字体、js 脚本、css 文件等静态资源文件。\n如果需要，你可以完全以脚本化的方式来执行这些预加载操作。例如，我们在这里创建一个HTMLLinkElement 实例，然后将他们附加到 DOM 上：\n这意味着浏览器将预加载这个JavaScript文件，但并不实际执行它。\n如果要对其加以执行，在需要的时候，你可以执行：\n当你需要预加载一个脚本，但需要推迟到需要的时候才令其执行时，这种方式会特别有用。\n字体是要使用到的时候才会去加载字体的（如果字体是自定义的字体，会发起 Http 请求加载字体）。\n由于这个特性，我们可以预加载字体，待使用到字体的时候，字体已经加载完毕，无需等待加载。\n如下我们没有 preload 的时候，代码也是可以运行的，但是字体加载是需要等待页面 JS、CSS 资源加载完毕后，当前页面使用到字体才会去加载的：\n我们加上：\n就可以提交加载，节省大部分甚至全部的字体加载时间，一般都是全部的时间，因为 JS 资源文件比字体大多了（并行下载，最长的资源加载时间，决定了最大加载时间）。\nprefetch 一般是预加载非当前页面的资源，prefetch 是一个低优先级的资源提示，允许浏览器在后台（空闲时）获取将来可能用得到的资源，并且将他们存储在浏览器的缓存中。当前页面加载完毕，才会开始下载 d带有 prefetch 标记的资源，然后当用户进入另外一个页面，已经 prefetched 的资源可以立刻从缓存中加载。\n不过 prefech 的应用场景比较少。\n这种做法一般都是在用户滚动到响应位置（当然从用户体验式来说，需要提前一点加载），才会加载响应的图片，图片特别多的网上基本都会做这个优化（如视频网站）。\n胡慧聪记事 10 February 2006，夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。\n\n或者幻灯片查看图片的时候，用户即将查查下一张图片的时候再加载，而不是一次性加载全部的图片。\n带有 defer 或 async 属性的 script 资源都会并行下载，而且不会影响页面的解析，从而达到了节省脚本下载时间。\n两种的不同的在于：\n带有 defer 属性的资源会按照顺序在页面出现的属性，资源加载完后，会在 DOMContentLoaded事件调用之前依次执行。\n带有 async 属性的资源则是下载完立即执行，可能在 DOMContentLoaded 事件之前或者之后执行，多个带有 async 属性的资源无执行顺序，谁先加载完成，谁先执行。\n那么为什么可以节省下载时间？我们来对比一下。\n缓存对于再次访问相同资源来说，是个极大的优化，缓存是 http 优化的必经之道。对于 css 和 js 这些静态资源文件，我们一般都是用强缓存（例如缓存30天），强缓存无需再次向服务请求静态资源。\n但是强缓存如果使用不当，那么会对用户造成意想不到的 bug，如入口 html 文件就不能被强缓存了，否则版本更新后，用户在缓存期间是无法访问到新版的页面。\n详细可以看下本人的另一篇缓存相关的文章，浏览器之HTTP缓存的那些事。\nHttp2.0 多路复用解决了多域名并发现在问题，可以节省资源总体的下载时间，还有请求头压缩和差异传输也会提高传输效率。\nHTTP1.1 持久连接解决了连接复用问题，但还是存在着一个问题，一个 TCP 无法并发处理请求：在一个 TCP 连接中，同一时间只能够发送一个请求，并且需要等响应完成才能够发送第二个请求。\nHTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP1.1 大了好几个数量级。\n当然 HTTP1.1 也可以多建立几个 TCP 连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。\nTCP 连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。\n多路复用能带来哪些优化呢？\n有多路复用特性，那么浏览器对同一域名的链接数的限制也是没必要的了（HTTP1.1 的谷歌对统一域名并发请求最多支持 6个 持久链接）。\n那么我们可以根据实际情况进行资源拆分，从而节省下载时间，无并发请求限制的情况下，下载的时间是根据并行下载的最长时间来算的，无需等待上一个资源下载，才能进行另外一个资源的下载，在资源比较多的情况下，这将大大提升资源总体的下载速度。\n以前的 CSS 的雪碧图 优化手段，在多路复用的特性下，已经是没必要的了。\n多路复用还带来了，延迟低的优化，这也是速度提升的一方面。\n在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破 HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。\n在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧并对它们采用二进制格式的编码，其中HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。\nHTTP2.0 使用 HPACK 算法对首部字段的数据进行压缩，这样数据体积小了，在网络上传输就会更快。\nHTTP2.0 规定了在客户端和服务器端会使用并且维护首部表来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次。\n事实上，如果请求中不包含首部字段（例如对同一资源的轮询请求），此时服务器自动使用之前请求发送的首部字段，那么首部字段开销就是零字节。\n如果首部发生变化了，那么只需要发送变化了数据在 Headers 帧里面，新增或修改的首部帧会被追加到首部表。首部表在 HTTP2.0 的连接存在期内始终存在，由客户端和服务器共同渐进地更新。\n胡慧聪记事-2006年02月07日，今天在花店买了一束鲜花\n\n严格意义上，CDN 不算 Http 优化，前端也无法直接处理这个事情，这是运维的事。CDN 节点可以解决跨运营商和跨地域访问的问题，提升访问速度。\nCDN的全称是 Content Delivery Network，即内容分发网络。\n胡慧聪记事-2006年02月12日，探访了杭州的西湖博物馆\nCDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。CDN 最大的优势在于提升用户资源访问速度，因此静态资源走 CDN 是一个很好的优化点。\n分布式服务器，用户就近访问，CDN 节点可以解决跨运营商和跨地域访问的问题，同时分散源服务器访问压力。\n还有一个而外的优点：\n无 cookie 传输（其实这个不完全算是优势）。静态资源一般无需 cookie，静态资源放在不同域名可以减少一定程度的带宽和提升一定的访问速度，虽然单个请求不明显，但是量多了是会有质的区别的。\nCDN 是如何分散源服务器的压力的？\nCDN 的核心点有两个: 一个是缓存，一个是回源。\n通过缓存和回源策略，达到分散源服务器的压力。首先将从根服务器请求来的资源按要求缓存。然后当有用户访问某个资源的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。\n首先需要一个第三方认证机构（CA认证），确保公钥的合法性（即证书，不合法的证书浏览器会警告），然后利用非对称加密（公钥私钥）方式加密并传输共享密钥到服务器，可以确保共享密钥无法被拦截被获取到（共享密钥被公钥加密了，只有对应的私钥才能解密，服务器有私钥），最终的客户端和服务端 HTTP 传输就是使用共享秘钥加密进行通信。\n通过公钥私钥的方式，避免了共享密钥发送途中被第三方拦截获取密钥的安全问题。\n通过公钥和私钥加密建立保护层（即 SSL 保护层），后续的 Http 请求就会使用共享密钥进行加密通信（共享的密钥已经被 SSL 保护起来了，外面无法拦截到），即所谓的安全层。\n所以建立了安全层后，即使 HTTP 报文被拦截到，也无法解密。\n由于公钥这个环节是公开的，存在被替换的风险，所以就有了第三方证书认证公司（CA认证），浏览器通过判断证书是否有效，发现网站是否值得信任。\n一般系统或者浏览器都会内置信任的根证书（这些 CA 组织都是非常可信的），浏览器可以根据这个根证书判断网站的证书是否合法。\n证书如果不合法，那么浏览器就会警告，不给用户访问证书不合法的网站，除非用户跳过这个警告。\n首先我们需要了解两者的定义和实现的方式，才能更好的区分两者的不同点。\n或许以前认为订阅发布模式是观察者模式的一种别称，但是发展至今，概念已经有了不少区别。\n在软件架构中，发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。\n或许你用过 eventemitter、node 的 events、Backbone 的 events 等等，这些都是前端早期，比较流行的数据流通信方式，即订阅发布模式。\n从字面意思来看，我们需要首先订阅，发布者发布消息后才会收到发布的消息。不过我们还需要一个中间者来协调，从事件角度来说，这个中间者就是事件中心，协调发布者和订阅者直接的消息通信。\nEvent 可以理解为事件中心，提供了订阅和发布功能。\n订阅者在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；发布者在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。\n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。\n观察者模式我们可能比较熟悉的场景就是响应式数据，如 Vue 的响应式、Mbox 的响应式。\ncontent=\"width=device-widthinitial-scale=1maximum-scale=1viewport-fit=cover\"\n角色角度来看，订阅发布模式需要三种角色，发布者、事件中心和订阅者。二观察者模式需要两种角色，目标和观察者，无事件中心负责通信。\n从耦合度上来看，订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是解耦的。而观察者模式中目标和观察者是直接关联的，耦合在一起（有些观念说观察者是解耦，解耦的是业务代码，不是目标和观察者本身）。\n由于订阅发布模式的发布者和订阅者是解耦的，只要引入订阅发布模式的事件中心，无论在何处都可以发布订阅。同时订阅发布者相互之间不影响。\n订阅发布模式在使用不当的情况下，容易造成数据流混乱，所以才有了 React 提出的单项数据流思想，就是为了解决数据流混乱的问题。\n灵活是有点，同时也是缺点，使用不当就会造成数据流混乱，导致代码不好维护。\n订阅发布模式需要维护事件列队，订阅的事件越多，内存消耗越大。\n目标变化就会通知观察者，这是观察者最大的有点，也是因为这个优点，观察者模式在前端才会这么出名。\n相比订阅发布模式，由于目标和观察者是耦合在一起的，所以观察者模式需要同时引入目标和观察者才能达到响应式的效果。而订阅发布模式只需要引入事件中心，订阅者和发布者可以不再一处。\n设计模式是前人解决某个特定场景下对而总结出来的一些解决方案。可能刚开始接触编程还没有什么经验的时候，会感觉设计模式没那么好理解，这个也很正常。有些简单的设计模式我们有时候用到，不过没意识到也是存在的。\n学习设计模式，可以让我们在处理问题的时候提供更多更快的解决思路。\n当然设计模式的应用也不是一时半会就会上手，很多情况下我们编写的业务逻辑都没用到设计模式或者本来就不需要特定的设计模式。\n这个使我们常使用的设计模式，也算最简单的设计模式之一，好处在于可以保持原有接口的数据结构不变动。\n适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。\n适配器模式很好理解，假设我们和后端定义了一个接口数据结构为（可以理解为旧接口）：\n但是后端后面因为其他原因，需要定义返回的结构为（可以理解为新接口）：\n然后我们前端的使用到后端接口有好几处，那么我可以把新的接口字段结构适配为老接口的，就不需要各处去修改字段，只要把源头的数据适配好就可以了。\n当然上面的是非常简单的场景，也是经常用到的场景。或许你会认为后端处理不更好了，的确是这样更好，但是这个不是我们讨论的范围。\n单例模式，从字面意思也很好理解，就是实例化多次都只会有一个实例。\n有些场景实例化一次，可以达到缓存效果，可以减少内存占用。还有些场景就是必须只能实例化一次，否则实例化多次会覆盖之前的实例，导致出现 bug（这种场景比较少见）。\n实现弹框的一种做法是先创建好弹框 然后使之隐藏 这样子的话会浪费部分不必要的 DOM 开销 我们可以在需要弹框的时候再进行创建 同时结合单例模式实现只有一个实例 从而节省部分 DOM 开销。下列为登入框部分代码:\n代理模式的定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。\n代理对象拥有本体对象的一切功能的同时，可以拥有而外的功能。而且代理对象和本体对象具有一致的接口，对使用者友好。\n下面这段代码运用代理模式来实现图片预加载可以看到通过代理模式巧妙地将创建图片与预加载逻辑分离，并且在未来如果不需要预加载，只要改成请求本体代替请求代理对象就行。\n在原有的功能上加上结果缓存功能，就属于缓存代理。\n原先有个功能是实现字符串反转（reverseString），那么在不改变 reverseString 的现有逻辑，我们可以使用缓存代理模式实现性能的优化，当然也可以在值改变的时候去处理下其他逻辑，如 Vue computed 的用法。\n装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\nES6/7 的decorator 语法提案，就是装饰者模式。\n在策略模式（Strategy Pattern）中，一个行为或其算法可以在运行时更改。\n假设我们的绩效分为 A、B、C、D 这四个等级，四个等级的奖励是不一样的，一般我们的代码是这样实现：\n这里每个函数就是一个策略，修改一个其中一个策略，并不会影响其他的策略，都可以单独使用。当然这只是个简单的范例，只为了说明。\n顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n上面的代码，对 order 相关的进行了解耦，order500，order200、orderCommon 等都是可以单独调用的。\n看下 2016-12-02，尤雨溪大神对此框架的评价（当然已经过时了，但是核心的思想还是一致的）:\n这个框架的 API 设计是从 Ractive 那边传承过来的（自然跟 Vue 也非常像），但这不是重点。Svelte 的核心思想在于‘通过静态编译减少框架运行时的代码量’。举例来说，当前的框架无论是 React Angular 还是 Vue，不管你怎么编译，使用的时候必然需要‘引入’框架本身，也就是所谓的运行时 (runtime)。但是用 Svelte 就不一样，一个 Svelte 组件编译了以后，所有需要的运行时代码都包含在里面了，除了引入这个组件本身，你不需要再额外引入一个所谓的框架运行时！\nSvelte 跟 vue 和 react一样，是一个数据驱动组件框架。但是也有很大的不同，它是一个运行时框架，无需引入框架本身，同时也没用到虚拟 DOM（运行时框架特性决定了这个框架跟虚拟 DOM 无缘）。\n虽然没使用到虚拟 DOM，但一样可以达到出色的性能，而且对开发者编写代码是十分便捷。\n那么我们先看下 svelte 的因为意思：苗条的。苗条的框架正是作者的初始目的，苗条包括代码编写量、打包大小等等。\n总结一下这个框架的优势，即作者开发新框架的目的。\n即 tree shaking，这个概念本来也是作者首先提出来的，webpack 是参考了 rollup。\n既有响应式数据的优点，v3 版本也解决了 vue 数据绑定缺点，用起来十分方便。\n都不用多说，一眼就看出来，svelte 简单多了。\n为什么不使用虚拟 DOM？\n所以如果你有这个想法，那么你肯定疑惑 svelte 没用到虚拟 DOM，它的速度为什么会快？\n其实虚拟 DOM 并不是什么时候都快，看下粗糙的对比例子。\n这里并没有直接统计渲染的时间，通过很多条数据我们就可以感受出来他们直接的性能。特别是点击每条数据的时候，明显感觉出来（由于是在线上的例子，所以首次渲染速度不准确，主要看点击的响应速度）。\n当然这仅仅是在 50000 条数据下的测试，对比一下框架所谓的速度，实际的情况下我们是不会一次性展示这么多数据的。所以在性能还可行的情况下，更多的选择是框架所带来的的便利，包括上手难度、维护难度、社区大小等等条件。\n首先虚拟 DOM 不是一个功能，它只是实现数据驱动的开发的手段，没有虚拟 DOM 我们也可以实现数据驱动的开发方式，svelte 正是做了这个事情。\n单纯从上面的对比例子来看，svelte 的速度比虚拟 DOM 更快（不同框架虚拟 DOM 实现会有差别）。虽然没有进行更深层次的对比，但是如果认为虚拟 DOM 速度快的观点是不完全对的，应该说虚拟 DOM 可以构建大部分速度还可以的 Web 应用。\n编写代码是那么的自然，如下面就是一个组件。\n这个就牛逼了，更加的自然，这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\n自动订阅的 svelte store\n这个其实就是订阅发布模式，不过 svelte 提供了自身特有的便捷的绑定方式（自动订阅），用起来是那么的自然，那么的爽。\n这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\nstores.js\n可以直接在 react、vue、angular 等框架中使用。\nsvelte 是一个刚起步不久的前端框架，无论在维护人员还是社区上都是大大不如三大框架，这里列举一下本人认为的 svelte 存在的缺点。\n当然这也是这个框架故意这样设计的，这样 props 也是可以响应式的。\n需要利用 props 的双向绑定特性，这就可能导致深层次组件的需要层层传递 DOM 对象（是子父传递，不是父子传递）。\n\njs 文件是不支持 sevelte 静态模板特性的，像下面这样是会报错的。\n找了一下，没找到可以支持 ts 的解决方案，如果有解决方案可以评论下。", "meta_QA": {"md5": "ad22dc3c3fe999fa17b1d1506de69e24", "question": "按日期罗列胡慧聪记事的内容", "answer": "按日期罗列胡慧聪记事的内容如下：\n- 2006年02月01日：晚上看了《爱尔兰人》，剧情很精彩。\n- 2006年02月04日：晚上在家学习了一些天文学知识。\n- 2006年02月06日：晚上学习了一些新的音乐技巧。\n- 2006年02月07日：今天在花店买了一束鲜花\n- 2006年02月10日：夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。\n- 2006年02月12日：探访了杭州的西湖博物馆\n- 2006年02月15日：阅读一篇关于蜜蜂舞蹈的科学文章\n- 2006年02月27日：今天参观了一个富有历史意义的地方", "raw_needles": ["胡慧聪记事\nFebruary 1, 2006，晚上看了《爱尔兰人》，剧情很精彩。", "胡慧聪记事 ：2006年02月04日 ：晚上在家学习了一些天文学知识。", "胡慧聪记事\n6 February 2006\n\n晚上学习了一些新的音乐技巧。", "胡慧聪记事-2006年02月07日，今天在花店买了一束鲜花", "胡慧聪记事 10 February 2006，夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。", "胡慧聪记事-2006年02月12日，探访了杭州的西湖博物馆", "胡慧聪记事-February-15-2006，阅读一篇关于蜜蜂舞蹈的科学文章", "胡慧聪记事-2006-02-27：今天参观了一个富有历史意义的地方"], "needles": ["胡慧聪记事-2006-02-27：今天参观了一个富有历史意义的地方", "胡慧聪记事\n6 February 2006\n\n晚上学习了一些新的音乐技巧。", "胡慧聪记事\nFebruary 1, 2006，晚上看了《爱尔兰人》，剧情很精彩。", "胡慧聪记事-February-15-2006，阅读一篇关于蜜蜂舞蹈的科学文章", "胡慧聪记事 ：2006年02月04日 ：晚上在家学习了一些天文学知识。", "胡慧聪记事 10 February 2006，夜幕降临，家中响起恐怖片紧张刺激的音效，度过一个惊悚的夜晚。", "胡慧聪记事-2006年02月07日，今天在花店买了一束鲜花", "胡慧聪记事-2006年02月12日，探访了杭州的西湖博物馆"], "source": "syn", "ppl": "syn"}, "meta_text": {"md5": "3e5b5f54b3e2fefc893b19dd015ac994", "raw_text": "本文章已备份在 github 上 山月的博客 欢迎 star\n刚开始，先抛出一个问题：\n你知道你们生产环境的 Node 服务平时占用内存多少吗？或者说是多少量级？\n山月在面试 Node 候选人时，这个问题足够筛掉一半的自称Node精通者，不过没有回答上来，我往往会再补充一个问题，以免漏掉优秀的无线上经验的候选人：\n如何知道某个进程消耗多少内存？\n当使用 Node 在生产环境作为服务器语言时，并发量过大或者代码问题造成 OOM (out of memory) 或者 CPU 满载这些都是服务器中常见的问题，此时通过监控 CPU 及内存，再结合日志及 Release 就很容易发现问题。\n所以，如何动态监控一个 Node 进程的内存变化呢？\n以下是一个 Node Server 的示例，并且是一个有内存泄漏问题的示例，并且是山月在生产环境定位了很久的问题的精简版。\n那次内存泄漏问题中，导致单个容器中的内存从原先的 400M 暴涨到 700M，在 800M 的容器资源限制下偶尔会发生 OOM，导致重启。一时没有定位到问题 (发现问题过迟，半个月前的时序数据已被吞没，于是未定位到 Release)，于是把资源限制上调到 1000M。后发现是由 ctx.request 挂载了数据库某个大字段而致\n一些问题需要在本地及测试环境得到及时扼杀，来避免在生产环境造成更大的影响。那么了解在本地如何监控内存就至关重要。\n这不仅试用与 node，而且适用于一切进程，包括 python，java 以及 go\n而在使用 pidstat 之前，需要先找到进程的 pid\n如何找到 Node 进程的 pid\n在 node 中可以通过 process.pid 来找到进程的 pid\n虽然通过写代码可以找到 pid，但是具有侵入性，不太实用。那如何通过非侵入的手段找到 pid 呢？# 第一种方法：通过多余的参数快速定位 pid\n从输出可以看出，当施加了压力测试后，内存由 19M 涨到了 85M。\n由于目前生产环境大都部署在 k8s，因此生产环境对于某个应用的内存监控本质上是 k8s 对于某个 workload/deployment 的内存监控，关于内存监控 metric 的数据流向大致如下:\n最终能够在 grafana 中收集到某一应用的内存监控实时图:\n这篇文章或许不能给你带来什么大的帮助，但是却可以让你了解一些你可能没接触到的知识点。\n由于有些参考资料来源于 ECMA 规范，所以感兴趣的可能需要先看《读懂 ECMAScript 规格》这篇文章，当然也可以忽略。\n粗体需要特别留意的，可能跟你想象中的不一样。\n这个最常用了，这个也很好理解。\n== 等同运算符的两边的类型不一样的时候，会有类型自动转换规则。\n相同的类型可以直接比较（相当于 === 比较），无需自动转换，不同类型有下面几种自动转换规则（x == y），规则优先级自上而下：\nnull == undefined\nundefined == null\n即使我们搞懂了 == 的规则，还是建议使用 === 这种严格的运算符来替代 ==。\n除开原始的数据类型 undefined、null、boolean、number、string、 symbol，其他的都属于对象，所以可以理解为这个 ToPrimitive 只对对象有作用。（还有个特殊的 NaN，不需要转换，NaN 可以理解为一种特殊的 number，typeof NaN === 'number'）。\n如果 x 或者 y 是对象，需要做转换处理，由于这里涉及的比较深，这里还是简单的说一下，知道有这回事就好。\n为什么不直接 a.toString() 呢，看下下面的例子你就懂了（会首先运行 valueOf，如果返回的是对象则再运行 toString，否则直接返回 valueOf 的返回值）\n那么需要从 px 和 py 的最小索引（假设是 k）对应的字符的 UTF-16 代码单元值 进行对比。\nx > y 的道理一样，这里就不多说了。\nPromise 的实现没那么简单，也没想象中的那么难，200 行代码以内就可以实现一个可替代原生的 Promise。\nPromise 已经是前端不可缺少的 API，现在已经是无处不在。你确定已经很了解 Promise 吗？如果不是很了解，那么应该了解 Promise 的实现原理。如果你觉得你自己挺了解的，那么你自己实现过 Promise 吗？\n无论如何，了解 Promise 的实现方式，对于提升我们的前端技能都有一定的帮助。\n下面的代码都是使用 ES6 语法实现的，不兼容 ES5，在最新的谷歌浏览器上运行没问题。\n如果你想先直接看效果，可以看文章最后的完整版，也可以看 github，github 上包括了单元测试。\n作为前端，一般最早接触 Promise 的概念是在 jquery 的1.5版本发布的 deferred objects。但是前端最早引入 P romise 的概念的却不是 jquery，而是dojo，而且 Promise 之所以叫 Promise 也是因为 dojo。Promises/A 标准的撰写者 KrisZyp 于 2009 年在 google 的 CommonJS 讨论组发了一个贴子，讨论了Promise API的设计思路。他声称想将这类 API 命名为 future，但是 dojo 已经实现的 deferred 机制中用到了 Promise这个术语，所以还是继续使用 Promise为此机制命名。\n当 Promise 变成接受状态（fulfillment）时，该参数作为 then 回调函数被调用。\nonRejected\n当Promise变成拒绝状态（rejection ）时，该参数作为回调函数被调用。\n最好先看看 Promises/A+规范，这里是个人总结的代码实现的基本原理。\nthen、catch 的回调方法只有在非 pending 状态才能执行。\n为了更好理解，本人总结了 Promise 的生命周期，生命周期分为两种情况，而且生命周期是不可逆的。\nexecutor、then、catch、finally 的执行都是有各自新的生命周期，即各自独立 Promise 环境。链式返回的下一个 Promise 的结果来源于上一个 Promise 的结果。\n其实每个链式调用的方法返回一个新的 Promise 实例（其实这也是 Promises/A+ 规范之一，这个也是实现 Promise 的关键之处）就可以解决这个问题，同时保证了每个链式方式的 Promise 的初始状态为 pending 状态，每个 then、catch、finally 都有自身的 Promise 生命周期。\n但是需要考虑中途断链的情况，断链后继续使用链式的话，Promise 的状态可能是非 pending 状态。\n这一点刚接触的时候，是没那么容易搞懂的。\n默认一开始就使用 new Promise(...).then(...) 进行链式调用， then、catch 等的回调函数都是处于 pending 状态，回调函数会加入异步列队等待执行。而断链的时候，可能过了几秒后才重新链式调用，那么 pending 状态就有可能变为了 fulfilled 或者 rejected 状态，需要立即执行，而不需要等待pending 状态变化后才执行。\n这个需要了解宏任务和微任务，但是，不是所有浏览器 JavaScript API 都提供微任务这一类的方法。\n所以这里先使用 setTimeout 代替，主要的目的就是要等待 pending 状态切换为其他的状态（即 executor 的执行），才会执行后续链式的回调操作。\n虽然非异步 resolve 或者 reject 的时候，使用同步方式也可以实现。这里注意一下，后面逐步说明的例子中，前面一些代码实现是没考虑异步处理的情况的，后面涉及到异步 resolve 或者 reject 的场景才加上去的。\n这里为了跟原生的 Promise 做区别，加了个前缀，改为 NPromise。\n第一个简单 Promsie 不考虑异步 resolve 的等情况，这一步只是用法像，then 的回调也不是异步执行的。\n测试例子（setTimeout 只是为了提供独立的执行环境）\n还是先不考虑异步 resolve 的等情况，这一步也只是用法像，then 的回调也不是异步执行的。\n异步 resolve 或者 reject，相对会复杂点，回调需要等待 pending 状态变为其他状态后才执行。\n原生 JavaScript 自带异步列队，我们可以利用这一点，这里先使用 setTimeout 代替，所以这个 Promise 的优先级跟 setTimeout 是同一个等级的（原生的是 Promise 优先于 setTimeout 执行）。\n新增 this._nextCallback\n由于链式返回的都是一个新的 Promise，所以下一步的回调其实只有一个，只有 Promise 的状态为 pending 的时候，this._nextCallback 才会有值（非 pending 的时候回调已经立即执行），同时等待 pending 状态改变后才会执行。\nthis._nextCallback 都只会在当前 Promise 生命周期中执行一次。\n如果非 pending 状态，那么立即执行回调函数（如果没回调函数，跳过）。\n拓展方法相对难的应该是 Promise.all，其他的都挺简单的。\n实现 Promise 比较关键的点在于状态的切换，然后链式的处理（返回新的 Promise，核心点）。最主要的逻辑还是 then 方法的处理（核心），理解了 then 方法里面的逻辑，那么就了解了大部分了。\n经过一些测试，除了下面两点之外：\nNPromise 单独用法和效果上基本 100% 跟原生的一致。\n如果你不相信，看看 github 上的单元测试，同时你试试下面的代码：\n虽然现在使用 async 函数 就可以替代 Generator 执行器了，不过了解下 Generator 执行器的原理还是挺有必要的。\n如果你不了解 Generator，那么你需要看这里。\n例子都可以在 Console 中运行的（谷歌版本 76.0.3809.100），都是以最新浏览器支持的 JavaScript 特性来编写的，不考虑兼容性。\n有 Generator next 函数的特性，next 函数运行后会返回如下结构：\nyield 表达式本身没有返回值，或者说总是返回 undefined。\nnext 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。\n由于 next 方法的参数表示上一个 yield 表达式的返回值，所以在第一次使用 next 方法时，传递参数是无效的。\n代码并不复杂，最简单的执行器就出来了。如果你是一步一步的看文章过来的，都理解了原理，那么这些代码也很好理解。\n考虑 yield 的类型是 Promise\n上面的代码执行如下的 Generator 函数是不正确的：\n这样就再运行 generatorExecuter(test) 就没问题了。\n这里用到了上面提到的原理三，如果不清楚可以回去看看。\n运行上面的代码后，test 函数 console.log 输出的不是 a，而是输出下面的字符串：\nGenerator 执行器没想的那么难，花点时间就可以吃透了。\n运行例子如下，直接在谷歌 console 运行即可：\n这篇文章是针对浏览器的 JavaScript 脚本，Node.js 大同小异，这里不涉及到 Node.js 的场景。当然 Node.js 作为服务端语言，必然更关注内存泄漏的问题。\n用户一般不会在一个 Web 页面停留比较久，即使有一点内存泄漏，重载页面内存也会跟着释放。而且浏览器也有自动回收内存的机制，所以我们前端其实并没有像 C、C++ 这类语言一样，特别关注内存泄漏的问题。\n但是如果我们对内存泄漏没有什么概念，有时候还是有可能因为内存泄漏，导致页面卡顿。了解内存泄漏，如何避免内存泄漏，也是我们提升前端技能的必经之路。\n俗话说好记忆不如烂笔头，所以本人就总结了一些内存泄漏相关的知识，避免一些低级的内存泄漏问题。\n什么是内存？\n在硬件级别上，计算机内存由大量触发器组成。每个触发器包含几个晶体管，能够存储一个位。单个触发器可以通过唯一标识符寻址，因此我们可以读取和覆盖它们。因此，从概念上讲，我们可以把我们的整个计算机内存看作是一个巨大的位数组，我们可以读和写。\n这么底层的概念，了解下就好，绝大多数数情况下，JavaScript 语言作为你们高级语言，无需我们使用二进制进直接进行读和写。\n内存也是有生命周期的，不管什么程序语言，一般可以按顺序分为三个周期：\n什么是内存泄漏？\n在计算机科学中，内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。\n如果内存不需要时，没有经过生命周期的释放期，那么就存在内存泄漏。\n内存泄漏简单理解：无用的内存还在占用，得不到释放和归还。比较严重时，无用的内存会持续递增，从而导致整个系统卡顿，甚至崩溃。\n像 C 语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()。相反，JavaScript是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。\nJavaScript 内存管理机制和内存的生命周期是一一对应的。首先需要分配内存，然后使用内存，最后释放内存。\n其中 JavaScript 语言不需要程序员手动分配内存，绝大部分情况下也不需要手动释放内存，对 JavaScript 程序员来说通常就是使用内存（即使用变量、函数、对象等）。\nJavaScript 定义变量就会自动分配内存的。我们只需了解 JavaScript 的内存是自动分配的就足够了。\n使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。\n根据上面的内存自动分配例子，我们继续内存使用的例子：\n前端界一般称垃圾内存回收为 GC（Garbage Collection，即垃圾回收）。\n内存泄漏一般都是发生在这一步，JavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况，如果存在这些情况，需要我们手动清理内存。\n以前一些老版本的浏览器的 JavaScript 回收机制没那么完善，经常出现一些 bug 的内存泄漏，不过现在的浏览器基本都没这些问题了，已过时的知识这里就不做深究了。\n这里了解下现在的 JavaScript 的垃圾内存的两种回收方式，熟悉下这两种算法可以帮助我们理解一些内存泄漏的场景。\n这是最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\n看下下面的例子，“这个对象”的内存被回收了吗？\n当前执行环境中，“这个对象”内存还没有被回收的，需要手动释放“这个对象”的内存（当然是还没离开执行环境的情况下），例如：\n这样引用的\"这个对象\"的内存就被回收了。\nES6 把引用有区分为强引用和弱引用，这个目前只有再 Set 和 Map 中才有。\n强引用才会有引用计数叠加，只有引用计数为 0 的对象的内存才会被回收，所以一般需要手动回收内存（手动回收的前提在于标记清除法还没执行，还处于当前执行环境）。\n而弱引用没有触发引用计数叠加，只要引用计数为 0，弱引用就会自动消失，无需手动回收内存。\n当变量进入执行环境时标记为“进入环境”，当变量离开执行环境时则标记为“离开环境”，被标记为“进入环境”的变量是不能被回收的，因为它们正在被使用，而标记为“离开环境”的变量则可以被回收\n环境可以理解为我们的作用域，但是全局作用域的变量只会在页面关闭才会销毁。\nJavaScript 的内存回收机制虽然能回收绝大部分的垃圾内存，但是还是存在回收不了的情况。程序员要让浏览器内存泄漏，浏览器也是管不了的。\n下面有些例子是在执行环境中，没离开当前执行环境，还没触发标记清除法。所以你需要读懂上面 JavaScript 的内存回收机制，才能更好理解下面的场景。\n不过在 eslint 帮助下，这种场景现在基本没人会犯了，eslint 会直接报错，了解下就好。\n无用的计时器忘记清理是新手最容易犯的错误之一。\n上面的组件销毁的时候，setInterval 还是在运行的，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候清除计时器，如下：\n无用的事件监听器忘记清理是新手最容易犯的错误之一。\n还是继续使用 vue 组件做例子。\n上面的组件销毁的时候，resize 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n如下是有内存泄漏的（成员是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakSet，WeakSet 的成员是弱引用，内存回收不会考虑到这个引用是否存在。\n如下是有内存泄漏的（键值是引用类型的，即对象）:\n有个更便捷的方式，使用 WeakMap，WeakMap 的键名是弱引用，内存回收不会考虑到这个引用是否存在。\n这个跟上面的被遗忘的事件监听器的道理是一样的。\n上面的组件销毁的时候，自定义 test 事件还是在监听中，里面涉及到的内存都是没法回收的（浏览器会认为这是必须的内存，不是垃圾内存），需要在组件销毁的时候移除相关的事件，如下：\n闭包是经常使用的，闭包能给我们带来很多便利。\n上面是没有内存泄漏的，因为name 变量是要用到的（非垃圾）。这也是从侧面反映了闭包的缺点，内存占用相对高，量多了会有性能影响。\n但是改成这样就是有内存泄漏的：\n在当前执行环境未结束的情况下，严格来说，这样是有内存泄漏的，name 变量是被 closure 返回的函数调用了，但是返回的函数没被使用，这个场景下 name 就属于垃圾内存。name 不是必须的，但是还是占用了内存，也不可被回收。\n当然这种也是极端情况，很少人会犯这种低级错误。这个例子可以让我们更清楚的认识内存泄漏。\n每个页面上的 DOM 都是占用内存的，假设有一个页面 A 元素，我们获取到了 A 元素 DOM 对象，然后赋值到了一个变量（内存指向是一样的），然后移除了页面的 A 元素，如果这个变量由于其他原因没有被回收，那么就存在内存泄漏，如下面的例子：\n上面的例子 button 元素 虽然在页面上移除了，但是内存指向换为了 this.elements.button，内存占用还是存在的。所以上面的代码还需要这样写： this.elements.button = null，手动释放这个内存。\n如何发现内存泄漏？\n内存泄漏时，内存一般都是会周期性的增长，我们可以借助谷歌浏览器的开发者工具进行判别。\n这里不进行详细的开发者工具使用说明，详细看谷歌开发者工具，不过谷歌浏览器是不断迭代更新的，有些文档落后了，界面长得不一样。\n这里针对下面例子进行一步一步的排查和找到问题出现在哪里：\n上面例子的代码可以直接运行的，怎么运行我就不多说了。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Performance 选项，勾选 Memory 选项。\n在页面上点击运行按钮，然后在开发者工具上面点击左上角的录制按钮，10 秒后在页面上点击停止按钮，5 秒后停止内存录制。得到的内存走势如下：\n由上图可知，10 秒之前内存周期性增长，10 后点击了停止按钮，内存平稳，不再递增。\n我们可以使用内存走势图判断当前页面是否有内存泄漏。经过测试上面的代码 20000 个数组项改为 20 个数组项，内存走势也一样能看出来。\n上一步确认是内存泄漏问题后，我们继续利用谷歌开发者工具进行问题查找。\n访问上面的代码页面，打开谷歌开发者工具，切换至 Memory 选项。页面上点击运行按钮，然后点击开发者工具左上角录制按钮，录制完成后继续点击录制，知道录制完三个为止。然后点击页面的停止按钮，再连续录制 3 次内存（不要清理之前的录制）。下图就是进行这些步骤后的截图：\n从这里也可以看出，点击运行按钮后，内存在不断递增。点击停止按钮后，内存就平稳了。虽然我们也可以使用这样的方式来判别是否存在内存泄漏，但是不够第一步的方法便捷，走势图也更直观。\n然后第二步的主要目的来了，记录 JavaScript 堆内存才是内存录制的主要目的，我们可以看到哪个堆占用的内存更高。\n在刚才的录制中选择 Snapshot 3 ，然后按照 Shallow Size 进行逆序排序（不了解的可以看内存术语），如下：\n从内存记录中，发现 array 对象占用最大，展开后发现，第一个 object elements 占用最大，选择这个 object elements 后可以在下面看到 newArr 变量，然后点击 test:23，只要是高亮下划线的地方都可以进去看看 （测试页面是 test.html），可以跳转到 newArr 附近。\nHttp 优化方式是前端性能优化的重要部分，也是前端必备的知识点之一。\n这个是最根本的途径，假设真的有个 10 几兆以上的静态资源文件，不减少大小的情况下，即使优化做到了极致，用户体验也好不了哪里去。\n如果整个网页就 2KB 大小的资源文件，不优化都很快。\n只打包用到的依赖包，目前 webpack tree shaking 功能已经自动处理了，还有尽量少使用第三方依赖包（当然看情况啦）。\n代码分割（code splitting），不同页面加载自己用到的代码，不加载其他页面的代码（其实也属于懒加载）。\n一般我们开启 gzip，基本都能压缩 6 倍左右（一般都是文件越大，字符串相似率越大，压缩率越大）。\n首先经过服务器压缩后，然后 Http 响应头 Content-Encoding 设置为相应的压缩方式，浏览器会自动解压的。\n当然还有其他的压缩方式，如 compress、deflate 等等，目前使用最广的还是 gzip。\n合并请求或者分散请求需要看实际情况的。\nhttp 1.1 （包括 http1.1）之前的版本，浏览器存在同域名并发限制，谷歌目前是同域名并发现在为6 个请求，其他的浏览器或多或少，但也差不了多少。\n如果是使用的是 http1.1 web 服务，那么我们首次加载的资源要基本保证在 4 个以内，所以静态资源请求数过多就要看情况进行合并请求了。\n预加载某些情况下可以大大提升加载速度进而提示用户体验。\ndns 解析也是需要时间的，特别在移动端的时候更明显，我们可以预解析 dns 减少不通域名 dns 解析时间。\n其实还有个 preconnect，preconnect 不仅完成 DNS 预解析，同时还将进行 TCP 握手和建立传输层协议，但是浏览器有兼容性，目前用不上。\n通过 preload 一般是预加载当前页面要用到的图片、字体、js 脚本、css 文件等静态资源文件。\n如果需要，你可以完全以脚本化的方式来执行这些预加载操作。例如，我们在这里创建一个HTMLLinkElement 实例，然后将他们附加到 DOM 上：\n这意味着浏览器将预加载这个JavaScript文件，但并不实际执行它。\n如果要对其加以执行，在需要的时候，你可以执行：\n当你需要预加载一个脚本，但需要推迟到需要的时候才令其执行时，这种方式会特别有用。\n字体是要使用到的时候才会去加载字体的（如果字体是自定义的字体，会发起 Http 请求加载字体）。\n由于这个特性，我们可以预加载字体，待使用到字体的时候，字体已经加载完毕，无需等待加载。\n如下我们没有 preload 的时候，代码也是可以运行的，但是字体加载是需要等待页面 JS、CSS 资源加载完毕后，当前页面使用到字体才会去加载的：\n我们加上：\n就可以提交加载，节省大部分甚至全部的字体加载时间，一般都是全部的时间，因为 JS 资源文件比字体大多了（并行下载，最长的资源加载时间，决定了最大加载时间）。\nprefetch 一般是预加载非当前页面的资源，prefetch 是一个低优先级的资源提示，允许浏览器在后台（空闲时）获取将来可能用得到的资源，并且将他们存储在浏览器的缓存中。当前页面加载完毕，才会开始下载 d带有 prefetch 标记的资源，然后当用户进入另外一个页面，已经 prefetched 的资源可以立刻从缓存中加载。\n不过 prefech 的应用场景比较少。\n这种做法一般都是在用户滚动到响应位置（当然从用户体验式来说，需要提前一点加载），才会加载响应的图片，图片特别多的网上基本都会做这个优化（如视频网站）。\n或者幻灯片查看图片的时候，用户即将查查下一张图片的时候再加载，而不是一次性加载全部的图片。\n带有 defer 或 async 属性的 script 资源都会并行下载，而且不会影响页面的解析，从而达到了节省脚本下载时间。\n两种的不同的在于：\n带有 defer 属性的资源会按照顺序在页面出现的属性，资源加载完后，会在 DOMContentLoaded事件调用之前依次执行。\n带有 async 属性的资源则是下载完立即执行，可能在 DOMContentLoaded 事件之前或者之后执行，多个带有 async 属性的资源无执行顺序，谁先加载完成，谁先执行。\n那么为什么可以节省下载时间？我们来对比一下。\n缓存对于再次访问相同资源来说，是个极大的优化，缓存是 http 优化的必经之道。对于 css 和 js 这些静态资源文件，我们一般都是用强缓存（例如缓存30天），强缓存无需再次向服务请求静态资源。\n但是强缓存如果使用不当，那么会对用户造成意想不到的 bug，如入口 html 文件就不能被强缓存了，否则版本更新后，用户在缓存期间是无法访问到新版的页面。\n详细可以看下本人的另一篇缓存相关的文章，浏览器之HTTP缓存的那些事。\nHttp2.0 多路复用解决了多域名并发现在问题，可以节省资源总体的下载时间，还有请求头压缩和差异传输也会提高传输效率。\nHTTP1.1 持久连接解决了连接复用问题，但还是存在着一个问题，一个 TCP 无法并发处理请求：在一个 TCP 连接中，同一时间只能够发送一个请求，并且需要等响应完成才能够发送第二个请求。\nHTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP1.1 大了好几个数量级。\n当然 HTTP1.1 也可以多建立几个 TCP 连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。\nTCP 连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。\n多路复用能带来哪些优化呢？\n有多路复用特性，那么浏览器对同一域名的链接数的限制也是没必要的了（HTTP1.1 的谷歌对统一域名并发请求最多支持 6个 持久链接）。\n那么我们可以根据实际情况进行资源拆分，从而节省下载时间，无并发请求限制的情况下，下载的时间是根据并行下载的最长时间来算的，无需等待上一个资源下载，才能进行另外一个资源的下载，在资源比较多的情况下，这将大大提升资源总体的下载速度。\n以前的 CSS 的雪碧图 优化手段，在多路复用的特性下，已经是没必要的了。\n多路复用还带来了，延迟低的优化，这也是速度提升的一方面。\n在应用层与传输层之间增加一个二进制分帧层，以此达到在不改动 HTTP 的语义，HTTP 方法、状态码、URI 及首部字段的情况下，突破 HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。\n在二进制分帧层上，HTTP2.0 会将所有传输的信息分割为更小的消息和帧并对它们采用二进制格式的编码，其中HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。\nHTTP2.0 使用 HPACK 算法对首部字段的数据进行压缩，这样数据体积小了，在网络上传输就会更快。\nHTTP2.0 规定了在客户端和服务器端会使用并且维护首部表来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次。\n事实上，如果请求中不包含首部字段（例如对同一资源的轮询请求），此时服务器自动使用之前请求发送的首部字段，那么首部字段开销就是零字节。\n如果首部发生变化了，那么只需要发送变化了数据在 Headers 帧里面，新增或修改的首部帧会被追加到首部表。首部表在 HTTP2.0 的连接存在期内始终存在，由客户端和服务器共同渐进地更新。\n严格意义上，CDN 不算 Http 优化，前端也无法直接处理这个事情，这是运维的事。CDN 节点可以解决跨运营商和跨地域访问的问题，提升访问速度。\nCDN的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。CDN 最大的优势在于提升用户资源访问速度，因此静态资源走 CDN 是一个很好的优化点。\n分布式服务器，用户就近访问，CDN 节点可以解决跨运营商和跨地域访问的问题，同时分散源服务器访问压力。\n还有一个而外的优点：\n无 cookie 传输（其实这个不完全算是优势）。静态资源一般无需 cookie，静态资源放在不同域名可以减少一定程度的带宽和提升一定的访问速度，虽然单个请求不明显，但是量多了是会有质的区别的。\nCDN 是如何分散源服务器的压力的？\nCDN 的核心点有两个: 一个是缓存，一个是回源。\n通过缓存和回源策略，达到分散源服务器的压力。首先将从根服务器请求来的资源按要求缓存。然后当有用户访问某个资源的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。\n首先需要一个第三方认证机构（CA认证），确保公钥的合法性（即证书，不合法的证书浏览器会警告），然后利用非对称加密（公钥私钥）方式加密并传输共享密钥到服务器，可以确保共享密钥无法被拦截被获取到（共享密钥被公钥加密了，只有对应的私钥才能解密，服务器有私钥），最终的客户端和服务端 HTTP 传输就是使用共享秘钥加密进行通信。\n通过公钥私钥的方式，避免了共享密钥发送途中被第三方拦截获取密钥的安全问题。\n通过公钥和私钥加密建立保护层（即 SSL 保护层），后续的 Http 请求就会使用共享密钥进行加密通信（共享的密钥已经被 SSL 保护起来了，外面无法拦截到），即所谓的安全层。\n所以建立了安全层后，即使 HTTP 报文被拦截到，也无法解密。\n由于公钥这个环节是公开的，存在被替换的风险，所以就有了第三方证书认证公司（CA认证），浏览器通过判断证书是否有效，发现网站是否值得信任。\n一般系统或者浏览器都会内置信任的根证书（这些 CA 组织都是非常可信的），浏览器可以根据这个根证书判断网站的证书是否合法。\n证书如果不合法，那么浏览器就会警告，不给用户访问证书不合法的网站，除非用户跳过这个警告。\n首先我们需要了解两者的定义和实现的方式，才能更好的区分两者的不同点。\n或许以前认为订阅发布模式是观察者模式的一种别称，但是发展至今，概念已经有了不少区别。\n在软件架构中，发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。\n或许你用过 eventemitter、node 的 events、Backbone 的 events 等等，这些都是前端早期，比较流行的数据流通信方式，即订阅发布模式。\n从字面意思来看，我们需要首先订阅，发布者发布消息后才会收到发布的消息。不过我们还需要一个中间者来协调，从事件角度来说，这个中间者就是事件中心，协调发布者和订阅者直接的消息通信。\nEvent 可以理解为事件中心，提供了订阅和发布功能。\n订阅者在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；发布者在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。\n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。\n观察者模式我们可能比较熟悉的场景就是响应式数据，如 Vue 的响应式、Mbox 的响应式。\ncontent=\"width=device-widthinitial-scale=1maximum-scale=1viewport-fit=cover\"\n角色角度来看，订阅发布模式需要三种角色，发布者、事件中心和订阅者。二观察者模式需要两种角色，目标和观察者，无事件中心负责通信。\n从耦合度上来看，订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是解耦的。而观察者模式中目标和观察者是直接关联的，耦合在一起（有些观念说观察者是解耦，解耦的是业务代码，不是目标和观察者本身）。\n由于订阅发布模式的发布者和订阅者是解耦的，只要引入订阅发布模式的事件中心，无论在何处都可以发布订阅。同时订阅发布者相互之间不影响。\n订阅发布模式在使用不当的情况下，容易造成数据流混乱，所以才有了 React 提出的单项数据流思想，就是为了解决数据流混乱的问题。\n灵活是有点，同时也是缺点，使用不当就会造成数据流混乱，导致代码不好维护。\n订阅发布模式需要维护事件列队，订阅的事件越多，内存消耗越大。\n目标变化就会通知观察者，这是观察者最大的有点，也是因为这个优点，观察者模式在前端才会这么出名。\n相比订阅发布模式，由于目标和观察者是耦合在一起的，所以观察者模式需要同时引入目标和观察者才能达到响应式的效果。而订阅发布模式只需要引入事件中心，订阅者和发布者可以不再一处。\n设计模式是前人解决某个特定场景下对而总结出来的一些解决方案。可能刚开始接触编程还没有什么经验的时候，会感觉设计模式没那么好理解，这个也很正常。有些简单的设计模式我们有时候用到，不过没意识到也是存在的。\n学习设计模式，可以让我们在处理问题的时候提供更多更快的解决思路。\n当然设计模式的应用也不是一时半会就会上手，很多情况下我们编写的业务逻辑都没用到设计模式或者本来就不需要特定的设计模式。\n这个使我们常使用的设计模式，也算最简单的设计模式之一，好处在于可以保持原有接口的数据结构不变动。\n适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。\n适配器模式很好理解，假设我们和后端定义了一个接口数据结构为（可以理解为旧接口）：\n但是后端后面因为其他原因，需要定义返回的结构为（可以理解为新接口）：\n然后我们前端的使用到后端接口有好几处，那么我可以把新的接口字段结构适配为老接口的，就不需要各处去修改字段，只要把源头的数据适配好就可以了。\n当然上面的是非常简单的场景，也是经常用到的场景。或许你会认为后端处理不更好了，的确是这样更好，但是这个不是我们讨论的范围。\n单例模式，从字面意思也很好理解，就是实例化多次都只会有一个实例。\n有些场景实例化一次，可以达到缓存效果，可以减少内存占用。还有些场景就是必须只能实例化一次，否则实例化多次会覆盖之前的实例，导致出现 bug（这种场景比较少见）。\n实现弹框的一种做法是先创建好弹框 然后使之隐藏 这样子的话会浪费部分不必要的 DOM 开销 我们可以在需要弹框的时候再进行创建 同时结合单例模式实现只有一个实例 从而节省部分 DOM 开销。下列为登入框部分代码:\n代理模式的定义：为一个对象提供一个代用品或占位符，以便控制对它的访问。\n代理对象拥有本体对象的一切功能的同时，可以拥有而外的功能。而且代理对象和本体对象具有一致的接口，对使用者友好。\n下面这段代码运用代理模式来实现图片预加载可以看到通过代理模式巧妙地将创建图片与预加载逻辑分离，并且在未来如果不需要预加载，只要改成请求本体代替请求代理对象就行。\n在原有的功能上加上结果缓存功能，就属于缓存代理。\n原先有个功能是实现字符串反转（reverseString），那么在不改变 reverseString 的现有逻辑，我们可以使用缓存代理模式实现性能的优化，当然也可以在值改变的时候去处理下其他逻辑，如 Vue computed 的用法。\n装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\nES6/7 的decorator 语法提案，就是装饰者模式。\n在策略模式（Strategy Pattern）中，一个行为或其算法可以在运行时更改。\n假设我们的绩效分为 A、B、C、D 这四个等级，四个等级的奖励是不一样的，一般我们的代码是这样实现：\n这里每个函数就是一个策略，修改一个其中一个策略，并不会影响其他的策略，都可以单独使用。当然这只是个简单的范例，只为了说明。\n顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。\n上面的代码，对 order 相关的进行了解耦，order500，order200、orderCommon 等都是可以单独调用的。\n看下 2016-12-02，尤雨溪大神对此框架的评价（当然已经过时了，但是核心的思想还是一致的）:\n这个框架的 API 设计是从 Ractive 那边传承过来的（自然跟 Vue 也非常像），但这不是重点。Svelte 的核心思想在于‘通过静态编译减少框架运行时的代码量’。举例来说，当前的框架无论是 React Angular 还是 Vue，不管你怎么编译，使用的时候必然需要‘引入’框架本身，也就是所谓的运行时 (runtime)。但是用 Svelte 就不一样，一个 Svelte 组件编译了以后，所有需要的运行时代码都包含在里面了，除了引入这个组件本身，你不需要再额外引入一个所谓的框架运行时！\nSvelte 跟 vue 和 react一样，是一个数据驱动组件框架。但是也有很大的不同，它是一个运行时框架，无需引入框架本身，同时也没用到虚拟 DOM（运行时框架特性决定了这个框架跟虚拟 DOM 无缘）。\n虽然没使用到虚拟 DOM，但一样可以达到出色的性能，而且对开发者编写代码是十分便捷。\n那么我们先看下 svelte 的因为意思：苗条的。苗条的框架正是作者的初始目的，苗条包括代码编写量、打包大小等等。\n总结一下这个框架的优势，即作者开发新框架的目的。\n即 tree shaking，这个概念本来也是作者首先提出来的，webpack 是参考了 rollup。\n既有响应式数据的优点，v3 版本也解决了 vue 数据绑定缺点，用起来十分方便。\n都不用多说，一眼就看出来，svelte 简单多了。\n为什么不使用虚拟 DOM？\n所以如果你有这个想法，那么你肯定疑惑 svelte 没用到虚拟 DOM，它的速度为什么会快？\n其实虚拟 DOM 并不是什么时候都快，看下粗糙的对比例子。\n这里并没有直接统计渲染的时间，通过很多条数据我们就可以感受出来他们直接的性能。特别是点击每条数据的时候，明显感觉出来（由于是在线上的例子，所以首次渲染速度不准确，主要看点击的响应速度）。\n当然这仅仅是在 50000 条数据下的测试，对比一下框架所谓的速度，实际的情况下我们是不会一次性展示这么多数据的。所以在性能还可行的情况下，更多的选择是框架所带来的的便利，包括上手难度、维护难度、社区大小等等条件。\n首先虚拟 DOM 不是一个功能，它只是实现数据驱动的开发的手段，没有虚拟 DOM 我们也可以实现数据驱动的开发方式，svelte 正是做了这个事情。\n单纯从上面的对比例子来看，svelte 的速度比虚拟 DOM 更快（不同框架虚拟 DOM 实现会有差别）。虽然没有进行更深层次的对比，但是如果认为虚拟 DOM 速度快的观点是不完全对的，应该说虚拟 DOM 可以构建大部分速度还可以的 Web 应用。\n编写代码是那么的自然，如下面就是一个组件。\n这个就牛逼了，更加的自然，这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\n自动订阅的 svelte store\n这个其实就是订阅发布模式，不过 svelte 提供了自身特有的便捷的绑定方式（自动订阅），用起来是那么的自然，那么的爽。\n这种特性只有静态编译才能做到，这个就是 svelte 目前独有的优势。\nstores.js\n可以直接在 react、vue、angular 等框架中使用。\nsvelte 是一个刚起步不久的前端框架，无论在维护人员还是社区上都是大大不如三大框架，这里列举一下本人认为的 svelte 存在的缺点。\n当然这也是这个框架故意这样设计的，这样 props 也是可以响应式的。\n需要利用 props 的双向绑定特性，这就可能导致深层次组件的需要层层传递 DOM 对象（是子父传递，不是父子传递）。\n\njs 文件是不支持 sevelte 静态模板特性的，像下面这样是会报错的。\n找了一下，没找到可以支持 ts 的解决方案，如果有解决方案可以评论下。", "source": "SkyPile_大于16k字_9720条", "length": 14677}}
